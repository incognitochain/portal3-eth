// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package portalv3

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PortalV3BurnInstData is an auto generated low-level Go binding around an user-defined struct.
type PortalV3BurnInstData struct {
	Meta    uint8
	Shard   uint8
	Tokens  []common.Address
	To      common.Address
	Amounts []*big.Int
	Itx     [32]byte
}

// Portalv3ABI is the input ABI used to generate the binding from.
const Portalv3ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Delegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"MetaData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structPortalV3.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"updateDelegatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_meta\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updateMetaData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// Portalv3Bin is the compiled bytecode used for deploying new contracts.
var Portalv3Bin = ""

// DeployPortalv3 deploys a new Ethereum contract, binding an instance of Portalv3 to it.
func DeployPortalv3(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portalv3, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Portalv3Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// Portalv3 is an auto generated Go binding around an Ethereum contract.
type Portalv3 struct {
	Portalv3Caller     // Read-only binding to the contract
	Portalv3Transactor // Write-only binding to the contract
	Portalv3Filterer   // Log filterer for contract events
}

// Portalv3Caller is an auto generated read-only Go binding around an Ethereum contract.
type Portalv3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Portalv3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Portalv3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Portalv3Session struct {
	Contract     *Portalv3         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Portalv3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Portalv3CallerSession struct {
	Contract *Portalv3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Portalv3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Portalv3TransactorSession struct {
	Contract     *Portalv3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Portalv3Raw is an auto generated low-level Go binding around an Ethereum contract.
type Portalv3Raw struct {
	Contract *Portalv3 // Generic contract binding to access the raw methods on
}

// Portalv3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Portalv3CallerRaw struct {
	Contract *Portalv3Caller // Generic read-only contract binding to access the raw methods on
}

// Portalv3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Portalv3TransactorRaw struct {
	Contract *Portalv3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPortalv3 creates a new instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3(address common.Address, backend bind.ContractBackend) (*Portalv3, error) {
	contract, err := bindPortalv3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// NewPortalv3Caller creates a new read-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Caller(address common.Address, caller bind.ContractCaller) (*Portalv3Caller, error) {
	contract, err := bindPortalv3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Caller{contract: contract}, nil
}

// NewPortalv3Transactor creates a new write-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Transactor(address common.Address, transactor bind.ContractTransactor) (*Portalv3Transactor, error) {
	contract, err := bindPortalv3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Transactor{contract: contract}, nil
}

// NewPortalv3Filterer creates a new log filterer instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Filterer(address common.Address, filterer bind.ContractFilterer) (*Portalv3Filterer, error) {
	contract, err := bindPortalv3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Portalv3Filterer{contract: contract}, nil
}

// bindPortalv3 binds a generic wrapper to an already deployed contract.
func bindPortalv3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.Portalv3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Caller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Session) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3CallerSession) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3Caller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3Session) Admin() (common.Address, error) {
	return _Portalv3.Contract.Admin(&_Portalv3.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Admin() (common.Address, error) {
	return _Portalv3.Contract.Admin(&_Portalv3.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Caller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Session) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Caller) Delegator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "delegator")
	return *ret0, err
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Session) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Caller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Session) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Caller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Session) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3CallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Caller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Session) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Metadata(opts *bind.CallOpts, arg0 uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "metadata", arg0)
	return *ret0, err
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Metadata(arg0 uint8) (bool, error) {
	return _Portalv3.Contract.Metadata(&_Portalv3.CallOpts, arg0)
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Metadata(arg0 uint8) (bool, error) {
	return _Portalv3.Contract.Metadata(&_Portalv3.CallOpts, arg0)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Caller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (PortalV3BurnInstData, error) {
	var (
		ret0 = new(PortalV3BurnInstData)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Session) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3CallerSession) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Session) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3Caller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3Session) Successor() (common.Address, error) {
	return _Portalv3.Contract.Successor(&_Portalv3.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Successor() (common.Address, error) {
	return _Portalv3.Contract.Successor(&_Portalv3.CallOpts)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3Transactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3Session) Claim() (*types.Transaction, error) {
	return _Portalv3.Contract.Claim(&_Portalv3.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3TransactorSession) Claim() (*types.Transaction, error) {
	return _Portalv3.Contract.Claim(&_Portalv3.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Transactor) Deposit(opts *bind.TransactOpts, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "deposit", custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Session) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3TransactorSession) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Transactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "depositERC20", token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Session) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Transactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Session) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3TransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Session) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3TransactorSession) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3Transactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3Session) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Retire(&_Portalv3.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3TransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Retire(&_Portalv3.TransactOpts, _successor)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Session) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3TransactorSession) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3Transactor) UpdateDelegatorAddress(opts *bind.TransactOpts, _delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateDelegatorAddress", _delegator)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3Session) UpdateDelegatorAddress(_delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateDelegatorAddress(&_Portalv3.TransactOpts, _delegator)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateDelegatorAddress(_delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateDelegatorAddress(&_Portalv3.TransactOpts, _delegator)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Transactor) UpdateIncognitoAddress(opts *bind.TransactOpts, _incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateIncognitoAddress", _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Session) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3Transactor) UpdateMetaData(opts *bind.TransactOpts, _meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateMetaData", _meta, _value)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3Session) UpdateMetaData(_meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateMetaData(&_Portalv3.TransactOpts, _meta, _value)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateMetaData(_meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateMetaData(&_Portalv3.TransactOpts, _meta, _value)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Transactor) WithdrawLockedTokens(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "withdrawLockedTokens", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Session) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3TransactorSession) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Portalv3ClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Portalv3 contract.
type Portalv3ClaimIterator struct {
	Event *Portalv3Claim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Claim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Claim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Claim represents a Claim event raised by the Portalv3 contract.
type Portalv3Claim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) FilterClaim(opts *bind.FilterOpts) (*Portalv3ClaimIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &Portalv3ClaimIterator{contract: _Portalv3.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *Portalv3Claim) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Claim)
				if err := _Portalv3.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) ParseClaim(log types.Log) (*Portalv3Claim, error) {
	event := new(Portalv3Claim)
	if err := _Portalv3.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DelegatorIterator is returned from FilterDelegator and is used to iterate over the raw logs and unpacked data for Delegator events raised by the Portalv3 contract.
type Portalv3DelegatorIterator struct {
	Event *Portalv3Delegator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DelegatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Delegator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Delegator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DelegatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DelegatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Delegator represents a Delegator event raised by the Portalv3 contract.
type Portalv3Delegator struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDelegator is a free log retrieval operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterDelegator(opts *bind.FilterOpts) (*Portalv3DelegatorIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return &Portalv3DelegatorIterator{contract: _Portalv3.contract, event: "Delegator", logs: logs, sub: sub}, nil
}

// WatchDelegator is a free log subscription operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchDelegator(opts *bind.WatchOpts, sink chan<- *Portalv3Delegator) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Delegator)
				if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegator is a log parse operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseDelegator(log types.Log) (*Portalv3Delegator, error) {
	event := new(Portalv3Delegator)
	if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Portalv3 contract.
type Portalv3DepositIterator struct {
	Event *Portalv3Deposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Deposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Deposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Deposit represents a Deposit event raised by the Portalv3 contract.
type Portalv3Deposit struct {
	TokenID             common.Address
	CustodianIncAddress string
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterDeposit(opts *bind.FilterOpts) (*Portalv3DepositIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &Portalv3DepositIterator{contract: _Portalv3.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *Portalv3Deposit) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Deposit)
				if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseDeposit(log types.Log) (*Portalv3Deposit, error) {
	event := new(Portalv3Deposit)
	if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3ExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Portalv3 contract.
type Portalv3ExtendIterator struct {
	Event *Portalv3Extend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Extend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Extend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Extend represents a Extend event raised by the Portalv3 contract.
type Portalv3Extend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) FilterExtend(opts *bind.FilterOpts) (*Portalv3ExtendIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &Portalv3ExtendIterator{contract: _Portalv3.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *Portalv3Extend) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Extend)
				if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) ParseExtend(log types.Log) (*Portalv3Extend, error) {
	event := new(Portalv3Extend)
	if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3IncognitoProxyIterator is returned from FilterIncognitoProxy and is used to iterate over the raw logs and unpacked data for IncognitoProxy events raised by the Portalv3 contract.
type Portalv3IncognitoProxyIterator struct {
	Event *Portalv3IncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3IncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3IncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3IncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3IncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3IncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3IncognitoProxy represents a IncognitoProxy event raised by the Portalv3 contract.
type Portalv3IncognitoProxy struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterIncognitoProxy is a free log retrieval operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterIncognitoProxy(opts *bind.FilterOpts) (*Portalv3IncognitoProxyIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &Portalv3IncognitoProxyIterator{contract: _Portalv3.contract, event: "IncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchIncognitoProxy is a free log subscription operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchIncognitoProxy(opts *bind.WatchOpts, sink chan<- *Portalv3IncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3IncognitoProxy)
				if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncognitoProxy is a log parse operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseIncognitoProxy(log types.Log) (*Portalv3IncognitoProxy, error) {
	event := new(Portalv3IncognitoProxy)
	if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3MetaDataIterator is returned from FilterMetaData and is used to iterate over the raw logs and unpacked data for MetaData events raised by the Portalv3 contract.
type Portalv3MetaDataIterator struct {
	Event *Portalv3MetaData // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3MetaDataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3MetaData)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3MetaData)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3MetaDataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3MetaDataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3MetaData represents a MetaData event raised by the Portalv3 contract.
type Portalv3MetaData struct {
	Arg0 uint8
	Arg1 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterMetaData is a free log retrieval operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) FilterMetaData(opts *bind.FilterOpts) (*Portalv3MetaDataIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "MetaData")
	if err != nil {
		return nil, err
	}
	return &Portalv3MetaDataIterator{contract: _Portalv3.contract, event: "MetaData", logs: logs, sub: sub}, nil
}

// WatchMetaData is a free log subscription operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) WatchMetaData(opts *bind.WatchOpts, sink chan<- *Portalv3MetaData) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "MetaData")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3MetaData)
				if err := _Portalv3.contract.UnpackLog(event, "MetaData", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetaData is a log parse operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) ParseMetaData(log types.Log) (*Portalv3MetaData, error) {
	event := new(Portalv3MetaData)
	if err := _Portalv3.contract.UnpackLog(event, "MetaData", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Portalv3 contract.
type Portalv3PausedIterator struct {
	Event *Portalv3Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Paused represents a Paused event raised by the Portalv3 contract.
type Portalv3Paused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterPaused(opts *bind.FilterOpts) (*Portalv3PausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &Portalv3PausedIterator{contract: _Portalv3.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *Portalv3Paused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Paused)
				if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParsePaused(log types.Log) (*Portalv3Paused, error) {
	event := new(Portalv3Paused)
	if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Portalv3 contract.
type Portalv3UnpausedIterator struct {
	Event *Portalv3Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Unpaused represents a Unpaused event raised by the Portalv3 contract.
type Portalv3Unpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterUnpaused(opts *bind.FilterOpts) (*Portalv3UnpausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &Portalv3UnpausedIterator{contract: _Portalv3.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *Portalv3Unpaused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Unpaused)
				if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParseUnpaused(log types.Log) (*Portalv3Unpaused, error) {
	event := new(Portalv3Unpaused)
	if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3WithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Portalv3 contract.
type Portalv3WithdrawIterator struct {
	Event *Portalv3Withdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3WithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Withdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Withdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3WithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3WithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Withdraw represents a Withdraw event raised by the Portalv3 contract.
type Portalv3Withdraw struct {
	Token  []common.Address
	To     common.Address
	Amount []*big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) FilterWithdraw(opts *bind.FilterOpts) (*Portalv3WithdrawIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &Portalv3WithdrawIterator{contract: _Portalv3.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *Portalv3Withdraw) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Withdraw)
				if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) ParseWithdraw(log types.Log) (*Portalv3Withdraw, error) {
	event := new(Portalv3Withdraw)
	if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
