// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package portalv3

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PortalV3BurnInstData is an auto generated low-level Go binding around an user-defined struct.
type PortalV3BurnInstData struct {
	Meta   uint8
	Shard  uint8
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Itx    [32]byte
}

// Portalv3ABI is the input ABI used to generate the binding from.
const Portalv3ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Delegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structPortalV3.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"updateDelegatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// Portalv3Bin is the compiled bytecode used for deploying new contracts.
var Portalv3Bin = "0x60806040526001600460146101000a81548160ff02191690831515021790555034801561002b57600080fd5b5061302e8061003b6000396000f3fe60806040526004361061011f5760003560e01c80637e16e6e1116100a0578063a26e118611610064578063a26e118614610385578063ce9b7930146103a1578063cf54aaa0146103cc578063dca40d9e14610409578063f851a440146104465761011f565b80637e16e6e1146102b65780638456cb59146102f357806394b287261461030a5780639714378c146103335780639e6371ba1461035c5761011f565b80635c975abb116100e75780635c975abb146101cf57806368036268146101fa5780636ff968c31461022357806370a082311461024e57806379599f961461028b5761011f565b80633a80a7c0146101245780633f4ba83a1461014d5780634e71d92d1461016457806358bc83371461017b5780635a67cb87146101a6575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190611e4e565b610471565b005b34801561015957600080fd5b506101626105ec565b005b34801561017057600080fd5b5061017961071e565b005b34801561018757600080fd5b506101906108ae565b60405161019d91906128af565b60405180910390f35b3480156101b257600080fd5b506101cd60048036038101906101c89190611e77565b6108b3565b005b3480156101db57600080fd5b506101e4610bc2565b6040516101f191906129bc565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190611f76565b610bd5565b005b34801561022f57600080fd5b50610238610f93565b60405161024591906128af565b60405180910390f35b34801561025a57600080fd5b5061027560048036038101906102709190611e4e565b610fb9565b6040516102829190612c47565b60405180910390f35b34801561029757600080fd5b506102a0611088565b6040516102ad9190612c47565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d89190611f35565b61108e565b6040516102ea9190612c2c565b60405180910390f35b3480156102ff57600080fd5b506103086111a9565b005b34801561031657600080fd5b50610331600480360381019061032c9190611e4e565b61131f565b005b34801561033f57600080fd5b5061035a6004803603810190610355919061213e565b61149a565b005b34801561036857600080fd5b50610383600480360381019061037e9190611e4e565b6115fb565b005b61039f600480360381019061039a91906120f9565b611712565b005b3480156103ad57600080fd5b506103b66117f3565b6040516103c391906128af565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190611e4e565b611819565b6040516104009190612c62565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190611f0c565b6118a5565b60405161043d91906129bc565b60405180910390f35b34801561045257600080fd5b5061045b6118c5565b60405161046891906128af565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790612bec565b60405180910390fd5b600160149054906101000a900460ff1661054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054690612aac565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105e191906128af565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067290612bec565b60405180910390fd5b600160149054906101000a900460ff166106ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c190612aac565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3360405161071491906128ca565b60405180910390a1565b6002544210610762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075990612acc565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e990612b6c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516108a491906128af565b60405180910390a1565b600081565b600160149054906101000a900460ff1615610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90612bcc565b60405180910390fd5b6000849050600061091386611819565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161095091906128af565b60206040518083038186803b15801561096857600080fd5b505afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190612167565b90506000819050600087905060098460ff1611156109e35760098460ff1603600a0a81816109ca57fe5b04905060098460ff1603600a0a83816109df57fe5b0492505b670de0b6b3a76400008111158015610a035750670de0b6b3a76400008311155b8015610a295750670de0b6b3a7640000610a2684836118ea90919063ffffffff16565b11155b610a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5f90612b4c565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b8152600401610aa5939291906128e5565b600060405180830381600087803b158015610abf57600080fd5b505af1158015610ad3573d6000803e3d6000fd5b50505050610adf611915565b610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590612c0c565b60405180910390fd5b87610b3a83610b2c8c610fb9565b61195390919063ffffffff16565b14610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7190612b8c565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e89888884604051610baf949392919061297c565b60405180910390a1505050505050505050565b600160149054906101000a900460ff1681565b600160149054906101000a900460ff1615610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c90612bcc565b60405180910390fd5b610c2d611aa6565b610c368b61108e565b905061012c816000015160ff161480610c57575061012d816000015160ff16145b8015610c6a57506001816020015160ff16145b610c7357600080fd5b600560008260a00151815260200190815260200160002060009054906101000a900460ff1615610cd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccf90612aec565b60405180910390fd5b6001600560008360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614610d79576000610d4f8260400151611819565b905060098160ff161115610d775760098160ff1603600a0a8260800151028260800181815250505b505b610d8b8b8b8b8b8b8b8b8b8b8b61196d565b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415610e7e576000816060015173ffffffffffffffffffffffffffffffffffffffff168260800151604051610df29061289a565b60006040518083038185875af1925050503d8060008114610e2f576040519150601f19603f3d011682016040523d82523d6000602084013e610e34565b606091505b5050905080610e78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6f90612bac565b60405180910390fd5b50610f3f565b806040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826060015183608001516040518363ffffffff1660e01b8152600401610ec592919061291c565b600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b50505050610eff611915565b610f3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3590612bac565b60405180910390fd5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816040015182606001518360800151604051610f7e93929190612945565b60405180910390a15050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ff757479050611083565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161103091906128af565b60206040518083038186803b15801561104857600080fd5b505afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110809190612167565b90505b919050565b60025481565b611096611aa6565b61109e611aa6565b826000815181106110ab57fe5b602001015160f81c60f81b60f81c816000019060ff16908160ff1681525050826001815181106110d757fe5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122f90612bec565b60405180910390fd5b600160149054906101000a900460ff1615611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127f90612bcc565b60405180910390fd5b60025442106112cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c390612acc565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583360405161131591906128ca565b60405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a590612bec565b60405180910390fd5b600160149054906101000a900460ff166113fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f490612aac565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161148f91906128af565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152090612bec565b60405180910390fd5b600254421061156d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156490612acc565b60405180910390fd5b61016e81106115b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a890612b2c565b60405180910390fd5b620151808102600254016002819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8816040516115f09190612c47565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168190612bec565b60405180910390fd5b60025442106116ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c590612acc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160149054906101000a900460ff1615611762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175990612bcc565b60405180910390fd5b6b033b2e3c9fd0803ce80000004711156117b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a890612b4c565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e60008383346040516117e7949392919061297c565b60405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561186557600080fd5b505afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190612167565b915050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082840190508381101580156119025750828110155b61190b57600080fd5b8091505092915050565b600080600090503d60008114611932576020811461193b57611947565b60019150611947565b60206000803e60005191505b50600081141591505090565b60008282111561196257600080fd5b818303905092915050565b60008a8a604051602001611982929190612872565b604051602081830303815290604052805190602001209050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b8152600401611a0a9b9a999897969594939291906129d7565b60206040518083038186803b158015611a2257600080fd5b505afa158015611a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5a9190611ee3565b611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612b0c565b60405180910390fd5b5050505050505050505050565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b600081359050611b2081612f85565b92915050565b600082601f830112611b3757600080fd5b8135611b4a611b4582612caa565b612c7d565b91508181835260208401935060208101905083856020840282011115611b6f57600080fd5b60005b83811015611b9f5781611b858882611d32565b845260208401935060208301925050600181019050611b72565b5050505092915050565b600082601f830112611bba57600080fd5b8135611bcd611bc882612cd2565b612c7d565b91508181835260208401935060208101905083856020840282011115611bf257600080fd5b60005b83811015611c225781611c088882611d5c565b845260208401935060208301925050600181019050611bf5565b5050505092915050565b600082601f830112611c3d57600080fd5b8135611c50611c4b82612cfa565b612c7d565b91508181835260208401935060208101905083856020840282011115611c7557600080fd5b60005b83811015611ca55781611c8b8882611e0f565b845260208401935060208301925050600181019050611c78565b5050505092915050565b600082601f830112611cc057600080fd5b8135611cd3611cce82612d22565b612c7d565b91508181835260208401935060208101905083856020840282011115611cf857600080fd5b60005b83811015611d285781611d0e8882611e39565b845260208401935060208301925050600181019050611cfb565b5050505092915050565b600081359050611d4181612f9c565b92915050565b600081519050611d5681612f9c565b92915050565b600081359050611d6b81612fb3565b92915050565b600082601f830112611d8257600080fd5b8135611d95611d9082612d4a565b612c7d565b91508082526020830160208301858383011115611db157600080fd5b611dbc838284612f28565b50505092915050565b60008083601f840112611dd757600080fd5b8235905067ffffffffffffffff811115611df057600080fd5b602083019150836001820283011115611e0857600080fd5b9250929050565b600081359050611e1e81612fca565b92915050565b600081519050611e3381612fca565b92915050565b600081359050611e4881612fe1565b92915050565b600060208284031215611e6057600080fd5b6000611e6e84828501611b11565b91505092915050565b60008060008060608587031215611e8d57600080fd5b6000611e9b87828801611b11565b9450506020611eac87828801611e0f565b935050604085013567ffffffffffffffff811115611ec957600080fd5b611ed587828801611dc5565b925092505092959194509250565b600060208284031215611ef557600080fd5b6000611f0384828501611d47565b91505092915050565b600060208284031215611f1e57600080fd5b6000611f2c84828501611d5c565b91505092915050565b600060208284031215611f4757600080fd5b600082013567ffffffffffffffff811115611f6157600080fd5b611f6d84828501611d71565b91505092915050565b6000806000806000806000806000806101408b8d031215611f9657600080fd5b60008b013567ffffffffffffffff811115611fb057600080fd5b611fbc8d828e01611d71565b9a50506020611fcd8d828e01611e0f565b99505060408b013567ffffffffffffffff811115611fea57600080fd5b611ff68d828e01611ba9565b98505060608b013567ffffffffffffffff81111561201357600080fd5b61201f8d828e01611b26565b97505060806120308d828e01611d5c565b96505060a06120418d828e01611d5c565b95505060c08b013567ffffffffffffffff81111561205e57600080fd5b61206a8d828e01611c2c565b94505060e08b013567ffffffffffffffff81111561208757600080fd5b6120938d828e01611caf565b9350506101008b013567ffffffffffffffff8111156120b157600080fd5b6120bd8d828e01611ba9565b9250506101208b013567ffffffffffffffff8111156120db57600080fd5b6120e78d828e01611ba9565b9150509295989b9194979a5092959850565b6000806020838503121561210c57600080fd5b600083013567ffffffffffffffff81111561212657600080fd5b61213285828601611dc5565b92509250509250929050565b60006020828403121561215057600080fd5b600061215e84828501611e0f565b91505092915050565b60006020828403121561217957600080fd5b600061218784828501611e24565b91505092915050565b600061219c83836123a4565b60208301905092915050565b60006121b483836123c2565b60208301905092915050565b60006121cc838361281f565b60208301905092915050565b60006121e48383612854565b60208301905092915050565b6121f981612ef2565b82525050565b61220881612e93565b82525050565b61221781612e81565b82525050565b61222681612e81565b82525050565b600061223782612db6565b6122418185612e21565b935061224c83612d76565b8060005b8381101561227d5781516122648882612190565b975061226f83612ded565b925050600181019050612250565b5085935050505092915050565b600061229582612dc1565b61229f8185612e32565b93506122aa83612d86565b8060005b838110156122db5781516122c288826121a8565b97506122cd83612dfa565b9250506001810190506122ae565b5085935050505092915050565b60006122f382612dcc565b6122fd8185612e43565b935061230883612d96565b8060005b8381101561233957815161232088826121c0565b975061232b83612e07565b92505060018101905061230c565b5085935050505092915050565b600061235182612dd7565b61235b8185612e54565b935061236683612da6565b8060005b8381101561239757815161237e88826121d8565b975061238983612e14565b92505060018101905061236a565b5085935050505092915050565b6123ad81612ea5565b82525050565b6123bc81612ea5565b82525050565b6123cb81612eb1565b82525050565b6123da81612eb1565b82525050565b60006123eb82612de2565b6123f58185612e65565b9350612405818560208601612f37565b80840191505092915050565b600061241d8385612e70565b935061242a838584612f28565b61243383612f74565b840190509392505050565b600061244b601483612e70565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b600061248b600783612e70565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006124cb602183612e70565b91507f7769746864726177207472616e73616374696f6e20616c72656164792075736560008301527f64000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612531601883612e70565b91507f696e76616c696420696e737472756374696f6e206461746100000000000000006000830152602082019050919050565b6000612571601a83612e70565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b60006125b1601183612e70565b91507f6d61782076616c756520726561636865640000000000000000000000000000006000830152602082019050919050565b60006125f1600c83612e70565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000612631602d83612e70565b91507f74686520696e70757420616d6f756e74206e6f7420657175616c20746f20616d60008301527f6f756e74207265636569766564000000000000000000000000000000000000006020830152604082019050919050565b6000612697601a83612e70565b91507f696e7465726e616c207472616e73616374696f6e206572726f720000000000006000830152602082019050919050565b60006126d7600083612e65565b9150600082019050919050565b60006126f1601083612e70565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b6000612731600983612e70565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b6000612771601783612e70565b91507f7472616e736665722066726f6d20676f74206572726f720000000000000000006000830152602082019050919050565b60c0820160008201516127ba6000850182612854565b5060208201516127cd6020850182612854565b5060408201516127e0604085018261220e565b5060608201516127f360608501826121ff565b506080820151612806608085018261281f565b5060a082015161281960a08501826123c2565b50505050565b61282881612edb565b82525050565b61283781612edb565b82525050565b61284e61284982612edb565b612f6a565b82525050565b61285d81612ee5565b82525050565b61286c81612ee5565b82525050565b600061287e82856123e0565b915061288a828461283d565b6020820191508190509392505050565b60006128a5826126ca565b9150819050919050565b60006020820190506128c4600083018461221d565b92915050565b60006020820190506128df60008301846121f0565b92915050565b60006060820190506128fa60008301866121f0565b612907602083018561221d565b612914604083018461282e565b949350505050565b600060408201905061293160008301856121f0565b61293e602083018461282e565b9392505050565b600060608201905061295a600083018661221d565b61296760208301856121f0565b612974604083018461282e565b949350505050565b6000606082019050612991600083018761221d565b81810360208301526129a4818587612411565b90506129b3604083018461282e565b95945050505050565b60006020820190506129d160008301846123b3565b92915050565b6000610160820190506129ed600083018e6123b3565b6129fa602083018d6123d1565b612a07604083018c61282e565b8181036060830152612a19818b61228a565b90508181036080830152612a2d818a61222c565b9050612a3c60a08301896123d1565b612a4960c08301886123d1565b81810360e0830152612a5b81876122e8565b9050818103610100830152612a708186612346565b9050818103610120830152612a85818561228a565b9050818103610140830152612a9a818461228a565b90509c9b505050505050505050505050565b60006020820190508181036000830152612ac58161243e565b9050919050565b60006020820190508181036000830152612ae58161247e565b9050919050565b60006020820190508181036000830152612b05816124be565b9050919050565b60006020820190508181036000830152612b2581612524565b9050919050565b60006020820190508181036000830152612b4581612564565b9050919050565b60006020820190508181036000830152612b65816125a4565b9050919050565b60006020820190508181036000830152612b85816125e4565b9050919050565b60006020820190508181036000830152612ba581612624565b9050919050565b60006020820190508181036000830152612bc58161268a565b9050919050565b60006020820190508181036000830152612be5816126e4565b9050919050565b60006020820190508181036000830152612c0581612724565b9050919050565b60006020820190508181036000830152612c2581612764565b9050919050565b600060c082019050612c4160008301846127a4565b92915050565b6000602082019050612c5c600083018461282e565b92915050565b6000602082019050612c776000830184612863565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612ca057600080fd5b8060405250919050565b600067ffffffffffffffff821115612cc157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612ce957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d1157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d3957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d6157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612e8c82612ebb565b9050919050565b6000612e9e82612ebb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612efd82612f04565b9050919050565b6000612f0f82612f16565b9050919050565b6000612f2182612ebb565b9050919050565b82818337600083830152505050565b60005b83811015612f55578082015181840152602081019050612f3a565b83811115612f64576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b612f8e81612e81565b8114612f9957600080fd5b50565b612fa581612ea5565b8114612fb057600080fd5b50565b612fbc81612eb1565b8114612fc757600080fd5b50565b612fd381612edb565b8114612fde57600080fd5b50565b612fea81612ee5565b8114612ff557600080fd5b5056fea26469706673582212208e29d2f247fa891e288b8c7aedb2a776274e0e981feb1f0a476f505d6125e95064736f6c63430006060033"

// DeployPortalv3 deploys a new Ethereum contract, binding an instance of Portalv3 to it.
func DeployPortalv3(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portalv3, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Portalv3Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// Portalv3 is an auto generated Go binding around an Ethereum contract.
type Portalv3 struct {
	Portalv3Caller     // Read-only binding to the contract
	Portalv3Transactor // Write-only binding to the contract
	Portalv3Filterer   // Log filterer for contract events
}

// Portalv3Caller is an auto generated read-only Go binding around an Ethereum contract.
type Portalv3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Portalv3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Portalv3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Portalv3Session struct {
	Contract     *Portalv3         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Portalv3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Portalv3CallerSession struct {
	Contract *Portalv3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Portalv3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Portalv3TransactorSession struct {
	Contract     *Portalv3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Portalv3Raw is an auto generated low-level Go binding around an Ethereum contract.
type Portalv3Raw struct {
	Contract *Portalv3 // Generic contract binding to access the raw methods on
}

// Portalv3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Portalv3CallerRaw struct {
	Contract *Portalv3Caller // Generic read-only contract binding to access the raw methods on
}

// Portalv3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Portalv3TransactorRaw struct {
	Contract *Portalv3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPortalv3 creates a new instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3(address common.Address, backend bind.ContractBackend) (*Portalv3, error) {
	contract, err := bindPortalv3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// NewPortalv3Caller creates a new read-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Caller(address common.Address, caller bind.ContractCaller) (*Portalv3Caller, error) {
	contract, err := bindPortalv3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Caller{contract: contract}, nil
}

// NewPortalv3Transactor creates a new write-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Transactor(address common.Address, transactor bind.ContractTransactor) (*Portalv3Transactor, error) {
	contract, err := bindPortalv3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Transactor{contract: contract}, nil
}

// NewPortalv3Filterer creates a new log filterer instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Filterer(address common.Address, filterer bind.ContractFilterer) (*Portalv3Filterer, error) {
	contract, err := bindPortalv3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Portalv3Filterer{contract: contract}, nil
}

// bindPortalv3 binds a generic wrapper to an already deployed contract.
func bindPortalv3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.Portalv3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Caller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Session) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3CallerSession) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3Caller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3Session) Admin() (common.Address, error) {
	return _Portalv3.Contract.Admin(&_Portalv3.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Admin() (common.Address, error) {
	return _Portalv3.Contract.Admin(&_Portalv3.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Caller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Session) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Caller) Delegator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "delegator")
	return *ret0, err
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Session) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Caller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Session) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Caller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Session) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3CallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Portalv3 *Portalv3Caller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (PortalV3BurnInstData, error) {
	var (
		ret0 = new(PortalV3BurnInstData)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Portalv3 *Portalv3Session) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Portalv3 *Portalv3CallerSession) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Session) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3Caller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3Session) Successor() (common.Address, error) {
	return _Portalv3.Contract.Successor(&_Portalv3.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Successor() (common.Address, error) {
	return _Portalv3.Contract.Successor(&_Portalv3.CallOpts)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3Transactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3Session) Claim() (*types.Transaction, error) {
	return _Portalv3.Contract.Claim(&_Portalv3.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3TransactorSession) Claim() (*types.Transaction, error) {
	return _Portalv3.Contract.Claim(&_Portalv3.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Transactor) Deposit(opts *bind.TransactOpts, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "deposit", custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Session) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3TransactorSession) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Transactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "depositERC20", token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Session) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Transactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Session) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3TransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Session) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3TransactorSession) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3Transactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3Session) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Retire(&_Portalv3.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3TransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Retire(&_Portalv3.TransactOpts, _successor)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Session) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3TransactorSession) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3Transactor) UpdateDelegatorAddress(opts *bind.TransactOpts, _delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateDelegatorAddress", _delegator)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3Session) UpdateDelegatorAddress(_delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateDelegatorAddress(&_Portalv3.TransactOpts, _delegator)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateDelegatorAddress(_delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateDelegatorAddress(&_Portalv3.TransactOpts, _delegator)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Transactor) UpdateIncognitoAddress(opts *bind.TransactOpts, _incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateIncognitoAddress", _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Session) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Transactor) WithdrawLockedTokens(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "withdrawLockedTokens", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Session) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3TransactorSession) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Portalv3ClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Portalv3 contract.
type Portalv3ClaimIterator struct {
	Event *Portalv3Claim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Claim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Claim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Claim represents a Claim event raised by the Portalv3 contract.
type Portalv3Claim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) FilterClaim(opts *bind.FilterOpts) (*Portalv3ClaimIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &Portalv3ClaimIterator{contract: _Portalv3.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *Portalv3Claim) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Claim)
				if err := _Portalv3.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) ParseClaim(log types.Log) (*Portalv3Claim, error) {
	event := new(Portalv3Claim)
	if err := _Portalv3.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DelegatorIterator is returned from FilterDelegator and is used to iterate over the raw logs and unpacked data for Delegator events raised by the Portalv3 contract.
type Portalv3DelegatorIterator struct {
	Event *Portalv3Delegator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DelegatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Delegator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Delegator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DelegatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DelegatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Delegator represents a Delegator event raised by the Portalv3 contract.
type Portalv3Delegator struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDelegator is a free log retrieval operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterDelegator(opts *bind.FilterOpts) (*Portalv3DelegatorIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return &Portalv3DelegatorIterator{contract: _Portalv3.contract, event: "Delegator", logs: logs, sub: sub}, nil
}

// WatchDelegator is a free log subscription operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchDelegator(opts *bind.WatchOpts, sink chan<- *Portalv3Delegator) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Delegator)
				if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegator is a log parse operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseDelegator(log types.Log) (*Portalv3Delegator, error) {
	event := new(Portalv3Delegator)
	if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Portalv3 contract.
type Portalv3DepositIterator struct {
	Event *Portalv3Deposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Deposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Deposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Deposit represents a Deposit event raised by the Portalv3 contract.
type Portalv3Deposit struct {
	TokenID             common.Address
	CustodianIncAddress string
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterDeposit(opts *bind.FilterOpts) (*Portalv3DepositIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &Portalv3DepositIterator{contract: _Portalv3.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *Portalv3Deposit) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Deposit)
				if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseDeposit(log types.Log) (*Portalv3Deposit, error) {
	event := new(Portalv3Deposit)
	if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3ExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Portalv3 contract.
type Portalv3ExtendIterator struct {
	Event *Portalv3Extend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Extend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Extend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Extend represents a Extend event raised by the Portalv3 contract.
type Portalv3Extend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) FilterExtend(opts *bind.FilterOpts) (*Portalv3ExtendIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &Portalv3ExtendIterator{contract: _Portalv3.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *Portalv3Extend) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Extend)
				if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) ParseExtend(log types.Log) (*Portalv3Extend, error) {
	event := new(Portalv3Extend)
	if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3IncognitoProxyIterator is returned from FilterIncognitoProxy and is used to iterate over the raw logs and unpacked data for IncognitoProxy events raised by the Portalv3 contract.
type Portalv3IncognitoProxyIterator struct {
	Event *Portalv3IncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3IncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3IncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3IncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3IncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3IncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3IncognitoProxy represents a IncognitoProxy event raised by the Portalv3 contract.
type Portalv3IncognitoProxy struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterIncognitoProxy is a free log retrieval operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterIncognitoProxy(opts *bind.FilterOpts) (*Portalv3IncognitoProxyIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &Portalv3IncognitoProxyIterator{contract: _Portalv3.contract, event: "IncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchIncognitoProxy is a free log subscription operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchIncognitoProxy(opts *bind.WatchOpts, sink chan<- *Portalv3IncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3IncognitoProxy)
				if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncognitoProxy is a log parse operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseIncognitoProxy(log types.Log) (*Portalv3IncognitoProxy, error) {
	event := new(Portalv3IncognitoProxy)
	if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Portalv3 contract.
type Portalv3PausedIterator struct {
	Event *Portalv3Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Paused represents a Paused event raised by the Portalv3 contract.
type Portalv3Paused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterPaused(opts *bind.FilterOpts) (*Portalv3PausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &Portalv3PausedIterator{contract: _Portalv3.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *Portalv3Paused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Paused)
				if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParsePaused(log types.Log) (*Portalv3Paused, error) {
	event := new(Portalv3Paused)
	if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Portalv3 contract.
type Portalv3UnpausedIterator struct {
	Event *Portalv3Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Unpaused represents a Unpaused event raised by the Portalv3 contract.
type Portalv3Unpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterUnpaused(opts *bind.FilterOpts) (*Portalv3UnpausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &Portalv3UnpausedIterator{contract: _Portalv3.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *Portalv3Unpaused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Unpaused)
				if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParseUnpaused(log types.Log) (*Portalv3Unpaused, error) {
	event := new(Portalv3Unpaused)
	if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3WithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Portalv3 contract.
type Portalv3WithdrawIterator struct {
	Event *Portalv3Withdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3WithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Withdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Withdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3WithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3WithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Withdraw represents a Withdraw event raised by the Portalv3 contract.
type Portalv3Withdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterWithdraw(opts *bind.FilterOpts) (*Portalv3WithdrawIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &Portalv3WithdrawIterator{contract: _Portalv3.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *Portalv3Withdraw) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Withdraw)
				if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseWithdraw(log types.Log) (*Portalv3Withdraw, error) {
	event := new(Portalv3Withdraw)
	if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
