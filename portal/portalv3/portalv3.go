// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package portalv3

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PortalV3BurnInstData is an auto generated low-level Go binding around an user-defined struct.
type PortalV3BurnInstData struct {
	Meta   uint8
	Shard  uint8
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Itx    [32]byte
}

// Portalv3ABI is the input ABI used to generate the binding from.
const Portalv3ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Delegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structPortalV3.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"updateDelegatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// Portalv3Bin is the compiled bytecode used for deploying new contracts.
var Portalv3Bin = "0x60806040526001600460146101000a81548160ff02191690831515021790555034801561002b57600080fd5b506130d68061003b6000396000f3fe60806040526004361061012a5760003560e01c80637e16e6e1116100ab5780639e6371ba1161006f5780639e6371ba14610392578063a26e1186146103bb578063ce9b7930146103d7578063cf54aaa014610402578063dca40d9e1461043f578063f851a4401461047c5761012a565b80637e16e6e1146102c15780638456cb59146102fe5780638a9845381461031557806394b28726146103405780639714378c146103695761012a565b80635c975abb116100f25780635c975abb146101da57806368036268146102055780636ff968c31461022e57806370a082311461025957806379599f96146102965761012a565b80633a80a7c01461012f5780633f4ba83a146101585780634e71d92d1461016f57806358bc8337146101865780635a67cb87146101b1575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190611ea8565b6104a7565b005b34801561016457600080fd5b5061016d610622565b005b34801561017b57600080fd5b50610184610754565b005b34801561019257600080fd5b5061019b6108e4565b6040516101a89190612918565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190611ed1565b6108e9565b005b3480156101e657600080fd5b506101ef610bf8565b6040516101fc9190612a25565b60405180910390f35b34801561021157600080fd5b5061022c60048036038101906102279190611fd0565b610c0b565b005b34801561023a57600080fd5b50610243610fc7565b6040516102509190612918565b60405180910390f35b34801561026557600080fd5b50610280600480360381019061027b9190611ea8565b610fed565b60405161028d9190612ccb565b60405180910390f35b3480156102a257600080fd5b506102ab6110bc565b6040516102b89190612ccb565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e39190611f8f565b6110c2565b6040516102f59190612cb0565b60405180910390f35b34801561030a57600080fd5b506103136111dd565b005b34801561032157600080fd5b5061032a611353565b6040516103379190612b15565b60405180910390f35b34801561034c57600080fd5b5061036760048036038101906103629190611ea8565b611379565b005b34801561037557600080fd5b50610390600480360381019061038b9190612198565b6114f4565b005b34801561039e57600080fd5b506103b960048036038101906103b49190611ea8565b611655565b005b6103d560048036038101906103d09190612153565b61176c565b005b3480156103e357600080fd5b506103ec61184d565b6040516103f99190612918565b60405180910390f35b34801561040e57600080fd5b5061042960048036038101906104249190611ea8565b611873565b6040516104369190612ce6565b60405180910390f35b34801561044b57600080fd5b5061046660048036038101906104619190611f66565b6118ff565b6040516104739190612a25565b60405180910390f35b34801561048857600080fd5b5061049161191f565b60405161049e9190612918565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d90612c70565b60405180910390fd5b600160149054906101000a900460ff16610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057c90612b30565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516106179190612918565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a890612c70565b60405180910390fd5b600160149054906101000a900460ff16610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f790612b30565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3360405161074a9190612933565b60405180910390a1565b6002544210610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90612b50565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081f90612bf0565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516108da9190612918565b60405180910390a1565b600081565b600160149054906101000a900460ff1615610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093090612c50565b60405180910390fd5b6000849050600061094986611873565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109869190612918565b60206040518083038186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d691906121c1565b90506000819050600087905060098460ff161115610a195760098460ff1603600a0a8181610a0057fe5b04905060098460ff1603600a0a8381610a1557fe5b0492505b670de0b6b3a76400008111158015610a395750670de0b6b3a76400008311155b8015610a5f5750670de0b6b3a7640000610a5c848361194490919063ffffffff16565b11155b610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9590612bd0565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b8152600401610adb9392919061294e565b600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b50505050610b1561196f565b610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b90612c90565b60405180910390fd5b87610b7083610b628c610fed565b6119ad90919063ffffffff16565b14610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba790612c10565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e89888884604051610be594939291906129e5565b60405180910390a1505050505050505050565b600160149054906101000a900460ff1681565b600160149054906101000a900460ff1615610c5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5290612c50565b60405180910390fd5b610c63611b00565b610c6c8b6110c2565b90506077816000015160ff161480610c8b575060c8816000015160ff16145b8015610c9e57506001816020015160ff16145b610ca757600080fd5b600560008260a00151815260200190815260200160002060009054906101000a900460ff1615610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0390612b70565b60405180910390fd5b6001600560008360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614610dad576000610d838260400151611873565b905060098160ff161115610dab5760098160ff1603600a0a8260800151028260800181815250505b505b610dbf8b8b8b8b8b8b8b8b8b8b6119c7565b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415610eb2576000816060015173ffffffffffffffffffffffffffffffffffffffff168260800151604051610e2690612903565b60006040518083038185875af1925050503d8060008114610e63576040519150601f19603f3d011682016040523d82523d6000602084013e610e68565b606091505b5050905080610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea390612c30565b60405180910390fd5b50610f73565b806040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826060015183608001516040518363ffffffff1660e01b8152600401610ef9929190612985565b600060405180830381600087803b158015610f1357600080fd5b505af1158015610f27573d6000803e3d6000fd5b50505050610f3361196f565b610f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6990612c30565b60405180910390fd5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816040015182606001518360800151604051610fb2939291906129ae565b60405180910390a15050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561102b574790506110b7565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110649190612918565b60206040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906121c1565b90505b919050565b60025481565b6110ca611b00565b6110d2611b00565b826000815181106110df57fe5b602001015160f81c60f81b60f81c816000019060ff16908160ff16815250508260018151811061110b57fe5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461126c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126390612c70565b60405180910390fd5b600160149054906101000a900460ff16156112bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b390612c50565b60405180910390fd5b6002544210611300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f790612b50565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336040516113499190612933565b60405180910390a1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ff90612c70565b60405180910390fd5b600160149054906101000a900460ff16611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144e90612b30565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516114e99190612918565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157a90612c70565b60405180910390fd5b60025442106115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115be90612b50565b60405180910390fd5b61016e811061160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160290612bb0565b60405180910390fd5b620151808102600254016002819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e88160405161164a9190612ccb565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db90612c70565b60405180910390fd5b6002544210611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171f90612b50565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160149054906101000a900460ff16156117bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b390612c50565b60405180910390fd5b6b033b2e3c9fd0803ce800000047111561180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290612bd0565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e600083833460405161184194939291906129e5565b60405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156118bf57600080fd5b505afa1580156118d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f791906121c1565b915050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015801561195c5750828110155b61196557600080fd5b8091505092915050565b600080600090503d6000811461198c5760208114611995576119a1565b600191506119a1565b60206000803e60005191505b50600081141591505090565b6000828211156119bc57600080fd5b818303905092915050565b60008a8a6040516020016119dc9291906128db565b604051602081830303815290604052805190602001209050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b8152600401611a649b9a99989796959493929190612a40565b60206040518083038186803b158015611a7c57600080fd5b505afa158015611a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab49190611f3d565b611af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aea90612b90565b60405180910390fd5b5050505050505050505050565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b600081359050611b7a8161302d565b92915050565b600082601f830112611b9157600080fd5b8135611ba4611b9f82612d2e565b612d01565b91508181835260208401935060208101905083856020840282011115611bc957600080fd5b60005b83811015611bf95781611bdf8882611d8c565b845260208401935060208301925050600181019050611bcc565b5050505092915050565b600082601f830112611c1457600080fd5b8135611c27611c2282612d56565b612d01565b91508181835260208401935060208101905083856020840282011115611c4c57600080fd5b60005b83811015611c7c5781611c628882611db6565b845260208401935060208301925050600181019050611c4f565b5050505092915050565b600082601f830112611c9757600080fd5b8135611caa611ca582612d7e565b612d01565b91508181835260208401935060208101905083856020840282011115611ccf57600080fd5b60005b83811015611cff5781611ce58882611e69565b845260208401935060208301925050600181019050611cd2565b5050505092915050565b600082601f830112611d1a57600080fd5b8135611d2d611d2882612da6565b612d01565b91508181835260208401935060208101905083856020840282011115611d5257600080fd5b60005b83811015611d825781611d688882611e93565b845260208401935060208301925050600181019050611d55565b5050505092915050565b600081359050611d9b81613044565b92915050565b600081519050611db081613044565b92915050565b600081359050611dc58161305b565b92915050565b600082601f830112611ddc57600080fd5b8135611def611dea82612dce565b612d01565b91508082526020830160208301858383011115611e0b57600080fd5b611e16838284612fd0565b50505092915050565b60008083601f840112611e3157600080fd5b8235905067ffffffffffffffff811115611e4a57600080fd5b602083019150836001820283011115611e6257600080fd5b9250929050565b600081359050611e7881613072565b92915050565b600081519050611e8d81613072565b92915050565b600081359050611ea281613089565b92915050565b600060208284031215611eba57600080fd5b6000611ec884828501611b6b565b91505092915050565b60008060008060608587031215611ee757600080fd5b6000611ef587828801611b6b565b9450506020611f0687828801611e69565b935050604085013567ffffffffffffffff811115611f2357600080fd5b611f2f87828801611e1f565b925092505092959194509250565b600060208284031215611f4f57600080fd5b6000611f5d84828501611da1565b91505092915050565b600060208284031215611f7857600080fd5b6000611f8684828501611db6565b91505092915050565b600060208284031215611fa157600080fd5b600082013567ffffffffffffffff811115611fbb57600080fd5b611fc784828501611dcb565b91505092915050565b6000806000806000806000806000806101408b8d031215611ff057600080fd5b60008b013567ffffffffffffffff81111561200a57600080fd5b6120168d828e01611dcb565b9a505060206120278d828e01611e69565b99505060408b013567ffffffffffffffff81111561204457600080fd5b6120508d828e01611c03565b98505060608b013567ffffffffffffffff81111561206d57600080fd5b6120798d828e01611b80565b975050608061208a8d828e01611db6565b96505060a061209b8d828e01611db6565b95505060c08b013567ffffffffffffffff8111156120b857600080fd5b6120c48d828e01611c86565b94505060e08b013567ffffffffffffffff8111156120e157600080fd5b6120ed8d828e01611d09565b9350506101008b013567ffffffffffffffff81111561210b57600080fd5b6121178d828e01611c03565b9250506101208b013567ffffffffffffffff81111561213557600080fd5b6121418d828e01611c03565b9150509295989b9194979a5092959850565b6000806020838503121561216657600080fd5b600083013567ffffffffffffffff81111561218057600080fd5b61218c85828601611e1f565b92509250509250929050565b6000602082840312156121aa57600080fd5b60006121b884828501611e69565b91505092915050565b6000602082840312156121d357600080fd5b60006121e184828501611e7e565b91505092915050565b60006121f683836123fe565b60208301905092915050565b600061220e838361241c565b60208301905092915050565b60006122268383612888565b60208301905092915050565b600061223e83836128bd565b60208301905092915050565b61225381612f76565b82525050565b61226281612f17565b82525050565b61227181612f05565b82525050565b61228081612f05565b82525050565b600061229182612e3a565b61229b8185612ea5565b93506122a683612dfa565b8060005b838110156122d75781516122be88826121ea565b97506122c983612e71565b9250506001810190506122aa565b5085935050505092915050565b60006122ef82612e45565b6122f98185612eb6565b935061230483612e0a565b8060005b8381101561233557815161231c8882612202565b975061232783612e7e565b925050600181019050612308565b5085935050505092915050565b600061234d82612e50565b6123578185612ec7565b935061236283612e1a565b8060005b8381101561239357815161237a888261221a565b975061238583612e8b565b925050600181019050612366565b5085935050505092915050565b60006123ab82612e5b565b6123b58185612ed8565b93506123c083612e2a565b8060005b838110156123f15781516123d88882612232565b97506123e383612e98565b9250506001810190506123c4565b5085935050505092915050565b61240781612f29565b82525050565b61241681612f29565b82525050565b61242581612f35565b82525050565b61243481612f35565b82525050565b600061244582612e66565b61244f8185612ee9565b935061245f818560208601612fdf565b80840191505092915050565b61247481612f88565b82525050565b60006124868385612ef4565b9350612493838584612fd0565b61249c8361301c565b840190509392505050565b60006124b4601483612ef4565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b60006124f4600783612ef4565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612534602183612ef4565b91507f7769746864726177207472616e73616374696f6e20616c72656164792075736560008301527f64000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061259a601883612ef4565b91507f696e76616c696420696e737472756374696f6e206461746100000000000000006000830152602082019050919050565b60006125da601a83612ef4565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b600061261a601183612ef4565b91507f6d61782076616c756520726561636865640000000000000000000000000000006000830152602082019050919050565b600061265a600c83612ef4565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b600061269a602d83612ef4565b91507f74686520696e70757420616d6f756e74206e6f7420657175616c20746f20616d60008301527f6f756e74207265636569766564000000000000000000000000000000000000006020830152604082019050919050565b6000612700601a83612ef4565b91507f696e7465726e616c207472616e73616374696f6e206572726f720000000000006000830152602082019050919050565b6000612740600083612ee9565b9150600082019050919050565b600061275a601083612ef4565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b600061279a600983612ef4565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b60006127da601783612ef4565b91507f7472616e736665722066726f6d20676f74206572726f720000000000000000006000830152602082019050919050565b60c08201600082015161282360008501826128bd565b50602082015161283660208501826128bd565b5060408201516128496040850182612268565b50606082015161285c6060850182612259565b50608082015161286f6080850182612888565b5060a082015161288260a085018261241c565b50505050565b61289181612f5f565b82525050565b6128a081612f5f565b82525050565b6128b76128b282612f5f565b613012565b82525050565b6128c681612f69565b82525050565b6128d581612f69565b82525050565b60006128e7828561243a565b91506128f382846128a6565b6020820191508190509392505050565b600061290e82612733565b9150819050919050565b600060208201905061292d6000830184612277565b92915050565b6000602082019050612948600083018461224a565b92915050565b6000606082019050612963600083018661224a565b6129706020830185612277565b61297d6040830184612897565b949350505050565b600060408201905061299a600083018561224a565b6129a76020830184612897565b9392505050565b60006060820190506129c36000830186612277565b6129d0602083018561224a565b6129dd6040830184612897565b949350505050565b60006060820190506129fa6000830187612277565b8181036020830152612a0d81858761247a565b9050612a1c6040830184612897565b95945050505050565b6000602082019050612a3a600083018461240d565b92915050565b600061016082019050612a56600083018e61240d565b612a63602083018d61242b565b612a70604083018c612897565b8181036060830152612a82818b6122e4565b90508181036080830152612a96818a612286565b9050612aa560a083018961242b565b612ab260c083018861242b565b81810360e0830152612ac48187612342565b9050818103610100830152612ad981866123a0565b9050818103610120830152612aee81856122e4565b9050818103610140830152612b0381846122e4565b90509c9b505050505050505050505050565b6000602082019050612b2a600083018461246b565b92915050565b60006020820190508181036000830152612b49816124a7565b9050919050565b60006020820190508181036000830152612b69816124e7565b9050919050565b60006020820190508181036000830152612b8981612527565b9050919050565b60006020820190508181036000830152612ba98161258d565b9050919050565b60006020820190508181036000830152612bc9816125cd565b9050919050565b60006020820190508181036000830152612be98161260d565b9050919050565b60006020820190508181036000830152612c098161264d565b9050919050565b60006020820190508181036000830152612c298161268d565b9050919050565b60006020820190508181036000830152612c49816126f3565b9050919050565b60006020820190508181036000830152612c698161274d565b9050919050565b60006020820190508181036000830152612c898161278d565b9050919050565b60006020820190508181036000830152612ca9816127cd565b9050919050565b600060c082019050612cc5600083018461280d565b92915050565b6000602082019050612ce06000830184612897565b92915050565b6000602082019050612cfb60008301846128cc565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612d2457600080fd5b8060405250919050565b600067ffffffffffffffff821115612d4557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d6d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d9557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612dbd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612de557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f1082612f3f565b9050919050565b6000612f2282612f3f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612f8182612fac565b9050919050565b6000612f9382612f9a565b9050919050565b6000612fa582612f3f565b9050919050565b6000612fb782612fbe565b9050919050565b6000612fc982612f3f565b9050919050565b82818337600083830152505050565b60005b83811015612ffd578082015181840152602081019050612fe2565b8381111561300c576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b61303681612f05565b811461304157600080fd5b50565b61304d81612f29565b811461305857600080fd5b50565b61306481612f35565b811461306f57600080fd5b50565b61307b81612f5f565b811461308657600080fd5b50565b61309281612f69565b811461309d57600080fd5b5056fea26469706673582212203a0974889dedecf6ac4f69b89b1363d032f276a874c48b6d7f3287b2f0ba697064736f6c63430006060033"

// DeployPortalv3 deploys a new Ethereum contract, binding an instance of Portalv3 to it.
func DeployPortalv3(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portalv3, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Portalv3Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// Portalv3 is an auto generated Go binding around an Ethereum contract.
type Portalv3 struct {
	Portalv3Caller     // Read-only binding to the contract
	Portalv3Transactor // Write-only binding to the contract
	Portalv3Filterer   // Log filterer for contract events
}

// Portalv3Caller is an auto generated read-only Go binding around an Ethereum contract.
type Portalv3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Portalv3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Portalv3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Portalv3Session struct {
	Contract     *Portalv3         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Portalv3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Portalv3CallerSession struct {
	Contract *Portalv3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Portalv3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Portalv3TransactorSession struct {
	Contract     *Portalv3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Portalv3Raw is an auto generated low-level Go binding around an Ethereum contract.
type Portalv3Raw struct {
	Contract *Portalv3 // Generic contract binding to access the raw methods on
}

// Portalv3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Portalv3CallerRaw struct {
	Contract *Portalv3Caller // Generic read-only contract binding to access the raw methods on
}

// Portalv3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Portalv3TransactorRaw struct {
	Contract *Portalv3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPortalv3 creates a new instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3(address common.Address, backend bind.ContractBackend) (*Portalv3, error) {
	contract, err := bindPortalv3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// NewPortalv3Caller creates a new read-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Caller(address common.Address, caller bind.ContractCaller) (*Portalv3Caller, error) {
	contract, err := bindPortalv3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Caller{contract: contract}, nil
}

// NewPortalv3Transactor creates a new write-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Transactor(address common.Address, transactor bind.ContractTransactor) (*Portalv3Transactor, error) {
	contract, err := bindPortalv3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Transactor{contract: contract}, nil
}

// NewPortalv3Filterer creates a new log filterer instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Filterer(address common.Address, filterer bind.ContractFilterer) (*Portalv3Filterer, error) {
	contract, err := bindPortalv3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Portalv3Filterer{contract: contract}, nil
}

// bindPortalv3 binds a generic wrapper to an already deployed contract.
func bindPortalv3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.Portalv3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Caller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Session) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3CallerSession) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3Caller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3Session) Admin() (common.Address, error) {
	return _Portalv3.Contract.Admin(&_Portalv3.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Admin() (common.Address, error) {
	return _Portalv3.Contract.Admin(&_Portalv3.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Caller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Session) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Caller) Delegator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "delegator")
	return *ret0, err
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Session) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Caller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Session) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Caller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Session) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3CallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Caller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Session) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Portalv3 *Portalv3Caller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (PortalV3BurnInstData, error) {
	var (
		ret0 = new(PortalV3BurnInstData)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Portalv3 *Portalv3Session) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Portalv3 *Portalv3CallerSession) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Session) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3Caller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3Session) Successor() (common.Address, error) {
	return _Portalv3.Contract.Successor(&_Portalv3.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Successor() (common.Address, error) {
	return _Portalv3.Contract.Successor(&_Portalv3.CallOpts)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3Transactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3Session) Claim() (*types.Transaction, error) {
	return _Portalv3.Contract.Claim(&_Portalv3.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Portalv3 *Portalv3TransactorSession) Claim() (*types.Transaction, error) {
	return _Portalv3.Contract.Claim(&_Portalv3.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Transactor) Deposit(opts *bind.TransactOpts, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "deposit", custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Session) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3TransactorSession) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Transactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "depositERC20", token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Session) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Transactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Session) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3TransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Session) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3TransactorSession) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3Transactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3Session) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Retire(&_Portalv3.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Portalv3 *Portalv3TransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Retire(&_Portalv3.TransactOpts, _successor)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Session) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3TransactorSession) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3Transactor) UpdateDelegatorAddress(opts *bind.TransactOpts, _delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateDelegatorAddress", _delegator)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3Session) UpdateDelegatorAddress(_delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateDelegatorAddress(&_Portalv3.TransactOpts, _delegator)
}

// UpdateDelegatorAddress is a paid mutator transaction binding the contract method 0x94b28726.
//
// Solidity: function updateDelegatorAddress(address _delegator) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateDelegatorAddress(_delegator common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateDelegatorAddress(&_Portalv3.TransactOpts, _delegator)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Transactor) UpdateIncognitoAddress(opts *bind.TransactOpts, _incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateIncognitoAddress", _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Session) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Transactor) WithdrawLockedTokens(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "withdrawLockedTokens", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Session) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3TransactorSession) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Portalv3ClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Portalv3 contract.
type Portalv3ClaimIterator struct {
	Event *Portalv3Claim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Claim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Claim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Claim represents a Claim event raised by the Portalv3 contract.
type Portalv3Claim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) FilterClaim(opts *bind.FilterOpts) (*Portalv3ClaimIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &Portalv3ClaimIterator{contract: _Portalv3.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *Portalv3Claim) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Claim)
				if err := _Portalv3.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Portalv3 *Portalv3Filterer) ParseClaim(log types.Log) (*Portalv3Claim, error) {
	event := new(Portalv3Claim)
	if err := _Portalv3.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DelegatorIterator is returned from FilterDelegator and is used to iterate over the raw logs and unpacked data for Delegator events raised by the Portalv3 contract.
type Portalv3DelegatorIterator struct {
	Event *Portalv3Delegator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DelegatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Delegator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Delegator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DelegatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DelegatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Delegator represents a Delegator event raised by the Portalv3 contract.
type Portalv3Delegator struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDelegator is a free log retrieval operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterDelegator(opts *bind.FilterOpts) (*Portalv3DelegatorIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return &Portalv3DelegatorIterator{contract: _Portalv3.contract, event: "Delegator", logs: logs, sub: sub}, nil
}

// WatchDelegator is a free log subscription operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchDelegator(opts *bind.WatchOpts, sink chan<- *Portalv3Delegator) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Delegator)
				if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegator is a log parse operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseDelegator(log types.Log) (*Portalv3Delegator, error) {
	event := new(Portalv3Delegator)
	if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Portalv3 contract.
type Portalv3DepositIterator struct {
	Event *Portalv3Deposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Deposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Deposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Deposit represents a Deposit event raised by the Portalv3 contract.
type Portalv3Deposit struct {
	TokenID             common.Address
	CustodianIncAddress string
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterDeposit(opts *bind.FilterOpts) (*Portalv3DepositIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &Portalv3DepositIterator{contract: _Portalv3.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *Portalv3Deposit) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Deposit)
				if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseDeposit(log types.Log) (*Portalv3Deposit, error) {
	event := new(Portalv3Deposit)
	if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3ExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Portalv3 contract.
type Portalv3ExtendIterator struct {
	Event *Portalv3Extend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Extend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Extend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Extend represents a Extend event raised by the Portalv3 contract.
type Portalv3Extend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) FilterExtend(opts *bind.FilterOpts) (*Portalv3ExtendIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &Portalv3ExtendIterator{contract: _Portalv3.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *Portalv3Extend) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Extend)
				if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) ParseExtend(log types.Log) (*Portalv3Extend, error) {
	event := new(Portalv3Extend)
	if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3IncognitoProxyIterator is returned from FilterIncognitoProxy and is used to iterate over the raw logs and unpacked data for IncognitoProxy events raised by the Portalv3 contract.
type Portalv3IncognitoProxyIterator struct {
	Event *Portalv3IncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3IncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3IncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3IncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3IncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3IncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3IncognitoProxy represents a IncognitoProxy event raised by the Portalv3 contract.
type Portalv3IncognitoProxy struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterIncognitoProxy is a free log retrieval operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterIncognitoProxy(opts *bind.FilterOpts) (*Portalv3IncognitoProxyIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &Portalv3IncognitoProxyIterator{contract: _Portalv3.contract, event: "IncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchIncognitoProxy is a free log subscription operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchIncognitoProxy(opts *bind.WatchOpts, sink chan<- *Portalv3IncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3IncognitoProxy)
				if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncognitoProxy is a log parse operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseIncognitoProxy(log types.Log) (*Portalv3IncognitoProxy, error) {
	event := new(Portalv3IncognitoProxy)
	if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Portalv3 contract.
type Portalv3PausedIterator struct {
	Event *Portalv3Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Paused represents a Paused event raised by the Portalv3 contract.
type Portalv3Paused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterPaused(opts *bind.FilterOpts) (*Portalv3PausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &Portalv3PausedIterator{contract: _Portalv3.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *Portalv3Paused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Paused)
				if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParsePaused(log types.Log) (*Portalv3Paused, error) {
	event := new(Portalv3Paused)
	if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Portalv3 contract.
type Portalv3UnpausedIterator struct {
	Event *Portalv3Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Unpaused represents a Unpaused event raised by the Portalv3 contract.
type Portalv3Unpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterUnpaused(opts *bind.FilterOpts) (*Portalv3UnpausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &Portalv3UnpausedIterator{contract: _Portalv3.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *Portalv3Unpaused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Unpaused)
				if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParseUnpaused(log types.Log) (*Portalv3Unpaused, error) {
	event := new(Portalv3Unpaused)
	if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3WithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Portalv3 contract.
type Portalv3WithdrawIterator struct {
	Event *Portalv3Withdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3WithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Withdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Withdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3WithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3WithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Withdraw represents a Withdraw event raised by the Portalv3 contract.
type Portalv3Withdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterWithdraw(opts *bind.FilterOpts) (*Portalv3WithdrawIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &Portalv3WithdrawIterator{contract: _Portalv3.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *Portalv3Withdraw) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Withdraw)
				if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseWithdraw(log types.Log) (*Portalv3Withdraw, error) {
	event := new(Portalv3Withdraw)
	if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
