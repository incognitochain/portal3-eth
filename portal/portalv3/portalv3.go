// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package portalv3

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PortalV3BurnInstData is an auto generated low-level Go binding around an user-defined struct.
type PortalV3BurnInstData struct {
	Meta    uint8
	Shard   uint8
	Tokens  []common.Address
	To      common.Address
	Amounts []*big.Int
	Itx     [32]byte
}

// Portalv3ABI is the input ABI used to generate the binding from.
const Portalv3ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Delegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"MetaData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"incognitoProxyAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structPortalV3.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_meta\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updateMetaData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// Portalv3Bin is the compiled bytecode used for deploying new contracts.
var Portalv3Bin = "0x60806040526001600360146101000a81548160ff0219169083151502179055506000600360156101000a81548160ff02191690831515021790555034801561004657600080fd5b50613551806100566000396000f3fe6080604052600436106101145760003560e01c80638456cb59116100a0578063ce9b793011610064578063ce9b793014610356578063cf54aaa014610381578063dca40d9e146103be578063de94b4c8146103fb578063e0abace21461042457610114565b80638456cb59146102a65780638a984538146102bd5780639714378c146102e8578063a26e118614610311578063c4d66de81461032d57610114565b80635c975abb116100e75780635c975abb146101ad57806368036268146101d857806370a082311461020157806379599f961461023e5780637e16e6e11461026957610114565b80633a80a7c0146101195780633f4ba83a1461014257806358bc8337146101595780635a67cb8714610184575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611f72565b610461565b005b34801561014e57600080fd5b506101576105c1565b005b34801561016557600080fd5b5061016e6106d7565b60405161017b9190612c9a565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a69190611f9b565b6106dc565b005b3480156101b957600080fd5b506101c2610a6f565b6040516101cf9190612db5565b60405180910390f35b3480156101e457600080fd5b506101ff60048036038101906101fa919061209a565b610a81565b005b34801561020d57600080fd5b5061022860048036038101906102239190611f72565b610f76565b60405161023591906130c2565b60405180910390f35b34801561024a57600080fd5b50610253611045565b60405161026091906130c2565b60405180910390f35b34801561027557600080fd5b50610290600480360381019061028b9190612059565b61104b565b60405161029d91906130a0565b60405180910390f35b3480156102b257600080fd5b506102bb6112c0565b005b3480156102c957600080fd5b506102d261141b565b6040516102df9190612ea5565b60405180910390f35b3480156102f457600080fd5b5061030f600480360381019061030a9190612262565b611441565b005b61032b6004803603810190610326919061221d565b611588565b005b34801561033957600080fd5b50610354600480360381019061034f9190611f72565b6116ed565b005b34801561036257600080fd5b5061036b61181e565b6040516103789190612c9a565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190611f72565b611844565b6040516103b591906130dd565b60405180910390f35b3480156103ca57600080fd5b506103e560048036038101906103e09190612030565b6118d0565b6040516103f29190612db5565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d91906122dd565b6118f0565b005b34801561043057600080fd5b5061044b600480360381019061044691906122b4565b6119d3565b6040516104589190612db5565b60405180910390f35b6104696119f3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd90613060565b60405180910390fd5b6000809054906101000a900460ff16610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90612ec0565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105b69190612c9a565b60405180910390a150565b6105c96119f3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d90613060565b60405180910390fd5b6000809054906101000a900460ff16610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067b90612ec0565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336040516106cd9190612cb5565b60405180910390a1565b600081565b6000809054906101000a900460ff161561072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072290613040565b60405180910390fd5b600360149054906101000a900460ff1661077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077190612f00565b60405180910390fd5b6000600360146101000a81548160ff021916908315150217905550600084905060006107a586611844565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107e29190612c9a565b60206040518083038186803b1580156107fa57600080fd5b505afa15801561080e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610832919061228b565b90506000819050600087905060098460ff1611156108755760098460ff1603600a0a818161085c57fe5b04905060098460ff1603600a0a838161087157fe5b0492505b670de0b6b3a764000081111580156108955750670de0b6b3a76400008311155b80156108bb5750670de0b6b3a76400006108b88483611a2490919063ffffffff16565b11155b6108fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f190612fe0565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161093793929190612cd0565b600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b50505050610971611a4f565b6109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a790613080565b60405180910390fd5b876109cc836109be8c610f76565b611a8d90919063ffffffff16565b14610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0390613000565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e89888884604051610a419493929190612d30565b60405180910390a150505050506001600360146101000a81548160ff02191690831515021790555050505050565b6000809054906101000a900460ff1681565b6000809054906101000a900460ff1615610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac790613040565b60405180910390fd5b600360149054906101000a900460ff16610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690612f00565b60405180910390fd5b6000600360146101000a81548160ff021916908315150217905550610b42611be0565b610b4b8b61104b565b905060046000826000015160ff1660ff16815260200190815260200160002060009054906101000a900460ff16610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae90612ee0565b60405180910390fd5b600560008260a00151815260200190815260200160002060009054906101000a900460ff1615610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1390612f80565b60405180910390fd5b6001600560008360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550610c5e8b8b8b8b8b8b8b8b8b8b611aa7565b60008090505b8160400151518160ff161015610f0657600073ffffffffffffffffffffffffffffffffffffffff1682604001518260ff1681518110610c9f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610e2d576000610ce783604001518360ff1681518110610cda57fe5b6020026020010151611844565b905060098160ff161115610d3b5760098160ff1603600a0a83608001518360ff1681518110610d1257fe5b60200260200101510283608001518360ff1681518110610d2e57fe5b6020026020010181815250505b82604001518260ff1681518110610d4e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb846060015185608001518560ff1681518110610d8957fe5b60200260200101516040518363ffffffff1660e01b8152600401610dae929190612d07565b600060405180830381600087803b158015610dc857600080fd5b505af1158015610ddc573d6000803e3d6000fd5b50505050610de8611a4f565b610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e90613020565b60405180910390fd5b50610ef9565b6000826060015173ffffffffffffffffffffffffffffffffffffffff1683608001518360ff1681518110610e5d57fe5b6020026020010151604051610e7190612c85565b60006040518083038185875af1925050503d8060008114610eae576040519150601f19603f3d011682016040523d82523d6000602084013e610eb3565b606091505b5050905080610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90613020565b60405180910390fd5b505b8080600101915050610c64565b507f8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b816040015182606001518360800151604051610f4693929190612d70565b60405180910390a1506001600360146101000a81548160ff02191690831515021790555050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fb457479050611040565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fed9190612c9a565b60206040518083038186803b15801561100557600080fd5b505afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d919061228b565b90505b919050565b60015481565b611053611be0565b600382511015611098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f90612f40565b60405180910390fd5b6110a0611be0565b826000815181106110ad57fe5b602001015160f81c60f81b60f81c816000019060ff16908160ff1681525050826001815181106110d957fe5b602001015160f81c60f81b60f81c816020019060ff16908160ff168152505060008360028151811061110757fe5b602001015160f81c60f81b60f81c90508060ff1660400260aa0161ffff16845114611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90612f20565b60405180910390fd5b60608160ff1667ffffffffffffffff8111801561118357600080fd5b506040519080825280602002602001820160405280156111b25781602001602082028036833780820191505090505b509050600060608360ff1667ffffffffffffffff811180156111d357600080fd5b506040519080825280602002602001820160405280156112025781602001602082028036833780820191505090505b5090506000608a88015192508460400260aa0188015190506000600190505b8560ff168160ff161161125d5760408102606a018901518160200286015260408102608a01890151816020028401528080600101915050611221565b5083866040018190525082866060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818660800181905250808660a0018181525050859650505050505050919050565b6112c86119f3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c90613060565b60405180910390fd5b6000809054906101000a900460ff1615611384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137b90613040565b60405180910390fd5b60015442106113c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bf90612f60565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336040516114119190612cb5565b60405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114496119f3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad90613060565b60405180910390fd5b60015442106114fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f190612f60565b60405180910390fd5b61016e811061153e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153590612fc0565b60405180910390fd5b620151808102600154016001819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e88160405161157d91906130c2565b60405180910390a150565b6000809054906101000a900460ff16156115d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ce90613040565b60405180910390fd5b600360149054906101000a900460ff16611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90612f00565b60405180910390fd5b6000600360146101000a81548160ff0219169083151502179055506b033b2e3c9fd0803ce8000000471115611690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168790612fe0565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e60008383346040516116c69493929190612d30565b60405180910390a16001600360146101000a81548160ff0219169083151502179055505050565b600360159054906101000a900460ff161561170757600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506305a39a80420160018190555060016004600060aa60ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600060ab60ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600060ac60ff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360156101000a81548160ff0219169083151502179055506001600360146101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561189057600080fd5b505afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c8919061228b565b915050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b6118f86119f3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195c90613060565b60405180910390fd5b80600460008460ff1660ff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c1782826040516119c79291906130f8565b60405180910390a15050565b60046020528060005260406000206000915054906101000a900460ff1681565b6000807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b9050805491505090565b6000808284019050838110158015611a3c5750828110155b611a4557600080fd5b8091505092915050565b600080600090503d60008114611a6c5760208114611a7557611a81565b60019150611a81565b60206000803e60005191505b50600081141591505090565b600082821115611a9c57600080fd5b818303905092915050565b60008a8a604051602001611abc929190612c5d565b604051602081830303815290604052805190602001209050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b8152600401611b449b9a99989796959493929190612dd0565b60206040518083038186803b158015611b5c57600080fd5b505afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190612007565b611bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bca90612fa0565b60405180910390fd5b5050505050505050505050565b6040518060c00160405280600060ff168152602001600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600080191681525090565b600081359050611c44816134a8565b92915050565b600082601f830112611c5b57600080fd5b8135611c6e611c698261314e565b613121565b91508181835260208401935060208101905083856020840282011115611c9357600080fd5b60005b83811015611cc35781611ca98882611e56565b845260208401935060208301925050600181019050611c96565b5050505092915050565b600082601f830112611cde57600080fd5b8135611cf1611cec82613176565b613121565b91508181835260208401935060208101905083856020840282011115611d1657600080fd5b60005b83811015611d465781611d2c8882611e80565b845260208401935060208301925050600181019050611d19565b5050505092915050565b600082601f830112611d6157600080fd5b8135611d74611d6f8261319e565b613121565b91508181835260208401935060208101905083856020840282011115611d9957600080fd5b60005b83811015611dc95781611daf8882611f33565b845260208401935060208301925050600181019050611d9c565b5050505092915050565b600082601f830112611de457600080fd5b8135611df7611df2826131c6565b613121565b91508181835260208401935060208101905083856020840282011115611e1c57600080fd5b60005b83811015611e4c5781611e328882611f5d565b845260208401935060208301925050600181019050611e1f565b5050505092915050565b600081359050611e65816134bf565b92915050565b600081519050611e7a816134bf565b92915050565b600081359050611e8f816134d6565b92915050565b600082601f830112611ea657600080fd5b8135611eb9611eb4826131ee565b613121565b91508082526020830160208301858383011115611ed557600080fd5b611ee083828461344b565b50505092915050565b60008083601f840112611efb57600080fd5b8235905067ffffffffffffffff811115611f1457600080fd5b602083019150836001820283011115611f2c57600080fd5b9250929050565b600081359050611f42816134ed565b92915050565b600081519050611f57816134ed565b92915050565b600081359050611f6c81613504565b92915050565b600060208284031215611f8457600080fd5b6000611f9284828501611c35565b91505092915050565b60008060008060608587031215611fb157600080fd5b6000611fbf87828801611c35565b9450506020611fd087828801611f33565b935050604085013567ffffffffffffffff811115611fed57600080fd5b611ff987828801611ee9565b925092505092959194509250565b60006020828403121561201957600080fd5b600061202784828501611e6b565b91505092915050565b60006020828403121561204257600080fd5b600061205084828501611e80565b91505092915050565b60006020828403121561206b57600080fd5b600082013567ffffffffffffffff81111561208557600080fd5b61209184828501611e95565b91505092915050565b6000806000806000806000806000806101408b8d0312156120ba57600080fd5b60008b013567ffffffffffffffff8111156120d457600080fd5b6120e08d828e01611e95565b9a505060206120f18d828e01611f33565b99505060408b013567ffffffffffffffff81111561210e57600080fd5b61211a8d828e01611ccd565b98505060608b013567ffffffffffffffff81111561213757600080fd5b6121438d828e01611c4a565b97505060806121548d828e01611e80565b96505060a06121658d828e01611e80565b95505060c08b013567ffffffffffffffff81111561218257600080fd5b61218e8d828e01611d50565b94505060e08b013567ffffffffffffffff8111156121ab57600080fd5b6121b78d828e01611dd3565b9350506101008b013567ffffffffffffffff8111156121d557600080fd5b6121e18d828e01611ccd565b9250506101208b013567ffffffffffffffff8111156121ff57600080fd5b61220b8d828e01611ccd565b9150509295989b9194979a5092959850565b6000806020838503121561223057600080fd5b600083013567ffffffffffffffff81111561224a57600080fd5b61225685828601611ee9565b92509250509250929050565b60006020828403121561227457600080fd5b600061228284828501611f33565b91505092915050565b60006020828403121561229d57600080fd5b60006122ab84828501611f48565b91505092915050565b6000602082840312156122c657600080fd5b60006122d484828501611f5d565b91505092915050565b600080604083850312156122f057600080fd5b60006122fe85828601611f5d565b925050602061230f85828601611e56565b9150509250929050565b600061232583836123af565b60208301905092915050565b600061233d838361265f565b60208301905092915050565b6000612355838361267d565b60208301905092915050565b600061236d8383612c0a565b60208301905092915050565b60006123858383612c3f565b60208301905092915050565b61239a816133f1565b82525050565b6123a981613392565b82525050565b6123b881613380565b82525050565b6123c781613380565b82525050565b60006123d88261326a565b6123e281856132ed565b93506123ed8361321a565b8060005b8381101561241e5781516124058882612319565b9750612410836132ac565b9250506001810190506123f1565b5085935050505092915050565b60006124368261326a565b61244081856132fe565b935061244b8361321a565b8060005b8381101561247c5781516124638882612319565b975061246e836132ac565b92505060018101905061244f565b5085935050505092915050565b600061249482613275565b61249e818561330f565b93506124a98361322a565b8060005b838110156124da5781516124c18882612331565b97506124cc836132b9565b9250506001810190506124ad565b5085935050505092915050565b60006124f282613280565b6124fc8185613320565b93506125078361323a565b8060005b8381101561253857815161251f8882612349565b975061252a836132c6565b92505060018101905061250b565b5085935050505092915050565b60006125508261328b565b61255a8185613331565b93506125658361324a565b8060005b8381101561259657815161257d8882612361565b9750612588836132d3565b925050600181019050612569565b5085935050505092915050565b60006125ae8261328b565b6125b88185613342565b93506125c38361324a565b8060005b838110156125f45781516125db8882612361565b97506125e6836132d3565b9250506001810190506125c7565b5085935050505092915050565b600061260c82613296565b6126168185613353565b93506126218361325a565b8060005b838110156126525781516126398882612379565b9750612644836132e0565b925050600181019050612625565b5085935050505092915050565b612668816133a4565b82525050565b612677816133a4565b82525050565b612686816133b0565b82525050565b612695816133b0565b82525050565b60006126a6826132a1565b6126b08185613364565b93506126c081856020860161345a565b80840191505092915050565b6126d581613403565b82525050565b60006126e7838561336f565b93506126f483858461344b565b6126fd83613497565b840190509392505050565b600061271560148361336f565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b600061275560288361336f565b91507f6d657461646174612074797065206973206e6f7420616c6c6f776564206f6e2060008301527f706f7274616c76330000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127bb601a8361336f565b91507f63616e206e6f74207265656e7472616e7420746f207661756c740000000000006000830152602082019050919050565b60006127fb60138361336f565b91507f496e76616c696420696e737472756374696f6e000000000000000000000000006000830152602082019050919050565b600061283b60298361336f565b91507f4c656e677468206f6620696e737472756374696f6e206d75737420677265617460008301527f6572207468616e203300000000000000000000000000000000000000000000006020830152604082019050919050565b60006128a160078361336f565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006128e160218361336f565b91507f7769746864726177207472616e73616374696f6e20616c72656164792075736560008301527f64000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061294760188361336f565b91507f696e76616c696420696e737472756374696f6e206461746100000000000000006000830152602082019050919050565b6000612987601a8361336f565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b60006129c760118361336f565b91507f6d61782076616c756520726561636865640000000000000000000000000000006000830152602082019050919050565b6000612a07602d8361336f565b91507f74686520696e70757420616d6f756e74206e6f7420657175616c20746f20616d60008301527f6f756e74207265636569766564000000000000000000000000000000000000006020830152604082019050919050565b6000612a6d601a8361336f565b91507f696e7465726e616c207472616e73616374696f6e206572726f720000000000006000830152602082019050919050565b6000612aad600083613364565b9150600082019050919050565b6000612ac760108361336f565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b6000612b0760098361336f565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b6000612b4760178361336f565b91507f7472616e736665722066726f6d20676f74206572726f720000000000000000006000830152602082019050919050565b600060c083016000830151612b926000860182612c3f565b506020830151612ba56020860182612c3f565b5060408301518482036040860152612bbd82826123cd565b9150506060830151612bd260608601826123a0565b5060808301518482036080860152612bea8282612545565b91505060a0830151612bff60a086018261267d565b508091505092915050565b612c13816133da565b82525050565b612c22816133da565b82525050565b612c39612c34826133da565b61348d565b82525050565b612c48816133e4565b82525050565b612c57816133e4565b82525050565b6000612c69828561269b565b9150612c758284612c28565b6020820191508190509392505050565b6000612c9082612aa0565b9150819050919050565b6000602082019050612caf60008301846123be565b92915050565b6000602082019050612cca6000830184612391565b92915050565b6000606082019050612ce56000830186612391565b612cf260208301856123be565b612cff6040830184612c19565b949350505050565b6000604082019050612d1c6000830185612391565b612d296020830184612c19565b9392505050565b6000606082019050612d4560008301876123be565b8181036020830152612d588185876126db565b9050612d676040830184612c19565b95945050505050565b60006060820190508181036000830152612d8a818661242b565b9050612d996020830185612391565b8181036040830152612dab81846125a3565b9050949350505050565b6000602082019050612dca600083018461266e565b92915050565b600061016082019050612de6600083018e61266e565b612df3602083018d61268c565b612e00604083018c612c19565b8181036060830152612e12818b6124e7565b90508181036080830152612e26818a612489565b9050612e3560a083018961268c565b612e4260c083018861268c565b81810360e0830152612e5481876125a3565b9050818103610100830152612e698186612601565b9050818103610120830152612e7e81856124e7565b9050818103610140830152612e9381846124e7565b90509c9b505050505050505050505050565b6000602082019050612eba60008301846126cc565b92915050565b60006020820190508181036000830152612ed981612708565b9050919050565b60006020820190508181036000830152612ef981612748565b9050919050565b60006020820190508181036000830152612f19816127ae565b9050919050565b60006020820190508181036000830152612f39816127ee565b9050919050565b60006020820190508181036000830152612f598161282e565b9050919050565b60006020820190508181036000830152612f7981612894565b9050919050565b60006020820190508181036000830152612f99816128d4565b9050919050565b60006020820190508181036000830152612fb98161293a565b9050919050565b60006020820190508181036000830152612fd98161297a565b9050919050565b60006020820190508181036000830152612ff9816129ba565b9050919050565b60006020820190508181036000830152613019816129fa565b9050919050565b6000602082019050818103600083015261303981612a60565b9050919050565b6000602082019050818103600083015261305981612aba565b9050919050565b6000602082019050818103600083015261307981612afa565b9050919050565b6000602082019050818103600083015261309981612b3a565b9050919050565b600060208201905081810360008301526130ba8184612b7a565b905092915050565b60006020820190506130d76000830184612c19565b92915050565b60006020820190506130f26000830184612c4e565b92915050565b600060408201905061310d6000830185612c4e565b61311a602083018461266e565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561314457600080fd5b8060405250919050565b600067ffffffffffffffff82111561316557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561318d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156131b557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156131dd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561320557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061338b826133ba565b9050919050565b600061339d826133ba565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006133fc82613427565b9050919050565b600061340e82613415565b9050919050565b6000613420826133ba565b9050919050565b600061343282613439565b9050919050565b6000613444826133ba565b9050919050565b82818337600083830152505050565b60005b8381101561347857808201518184015260208101905061345d565b83811115613487576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b6134b181613380565b81146134bc57600080fd5b50565b6134c8816133a4565b81146134d357600080fd5b50565b6134df816133b0565b81146134ea57600080fd5b50565b6134f6816133da565b811461350157600080fd5b50565b61350d816133e4565b811461351857600080fd5b5056fea26469706673582212203ef9159c8a000d91c0e18d9bc40f64137ee5b6501514c5e1254f1d5d4ba9fabd64736f6c63430006060033"

// DeployPortalv3 deploys a new Ethereum contract, binding an instance of Portalv3 to it.
func DeployPortalv3(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portalv3, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Portalv3Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// Portalv3 is an auto generated Go binding around an Ethereum contract.
type Portalv3 struct {
	Portalv3Caller     // Read-only binding to the contract
	Portalv3Transactor // Write-only binding to the contract
	Portalv3Filterer   // Log filterer for contract events
}

// Portalv3Caller is an auto generated read-only Go binding around an Ethereum contract.
type Portalv3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Portalv3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Portalv3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Portalv3Session struct {
	Contract     *Portalv3         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Portalv3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Portalv3CallerSession struct {
	Contract *Portalv3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Portalv3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Portalv3TransactorSession struct {
	Contract     *Portalv3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Portalv3Raw is an auto generated low-level Go binding around an Ethereum contract.
type Portalv3Raw struct {
	Contract *Portalv3 // Generic contract binding to access the raw methods on
}

// Portalv3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Portalv3CallerRaw struct {
	Contract *Portalv3Caller // Generic read-only contract binding to access the raw methods on
}

// Portalv3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Portalv3TransactorRaw struct {
	Contract *Portalv3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPortalv3 creates a new instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3(address common.Address, backend bind.ContractBackend) (*Portalv3, error) {
	contract, err := bindPortalv3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// NewPortalv3Caller creates a new read-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Caller(address common.Address, caller bind.ContractCaller) (*Portalv3Caller, error) {
	contract, err := bindPortalv3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Caller{contract: contract}, nil
}

// NewPortalv3Transactor creates a new write-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Transactor(address common.Address, transactor bind.ContractTransactor) (*Portalv3Transactor, error) {
	contract, err := bindPortalv3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Transactor{contract: contract}, nil
}

// NewPortalv3Filterer creates a new log filterer instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Filterer(address common.Address, filterer bind.ContractFilterer) (*Portalv3Filterer, error) {
	contract, err := bindPortalv3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Portalv3Filterer{contract: contract}, nil
}

// bindPortalv3 binds a generic wrapper to an already deployed contract.
func bindPortalv3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.Portalv3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Caller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Session) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3CallerSession) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Caller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Session) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Caller) Delegator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "delegator")
	return *ret0, err
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Session) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Caller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Session) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Caller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Session) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3CallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Caller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Session) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Metadata(opts *bind.CallOpts, arg0 uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "metadata", arg0)
	return *ret0, err
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Metadata(arg0 uint8) (bool, error) {
	return _Portalv3.Contract.Metadata(&_Portalv3.CallOpts, arg0)
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Metadata(arg0 uint8) (bool, error) {
	return _Portalv3.Contract.Metadata(&_Portalv3.CallOpts, arg0)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Caller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (PortalV3BurnInstData, error) {
	var (
		ret0 = new(PortalV3BurnInstData)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Session) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3CallerSession) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Session) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Transactor) Deposit(opts *bind.TransactOpts, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "deposit", custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Session) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3TransactorSession) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Transactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "depositERC20", token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Session) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Transactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Session) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3TransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address incognitoProxyAddress) returns()
func (_Portalv3 *Portalv3Transactor) Initialize(opts *bind.TransactOpts, incognitoProxyAddress common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "initialize", incognitoProxyAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address incognitoProxyAddress) returns()
func (_Portalv3 *Portalv3Session) Initialize(incognitoProxyAddress common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Initialize(&_Portalv3.TransactOpts, incognitoProxyAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address incognitoProxyAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) Initialize(incognitoProxyAddress common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Initialize(&_Portalv3.TransactOpts, incognitoProxyAddress)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Session) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3TransactorSession) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Session) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3TransactorSession) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Transactor) UpdateIncognitoAddress(opts *bind.TransactOpts, _incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateIncognitoAddress", _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Session) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3Transactor) UpdateMetaData(opts *bind.TransactOpts, _meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateMetaData", _meta, _value)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3Session) UpdateMetaData(_meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateMetaData(&_Portalv3.TransactOpts, _meta, _value)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateMetaData(_meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateMetaData(&_Portalv3.TransactOpts, _meta, _value)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Transactor) WithdrawLockedTokens(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "withdrawLockedTokens", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Session) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3TransactorSession) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Portalv3DelegatorIterator is returned from FilterDelegator and is used to iterate over the raw logs and unpacked data for Delegator events raised by the Portalv3 contract.
type Portalv3DelegatorIterator struct {
	Event *Portalv3Delegator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DelegatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Delegator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Delegator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DelegatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DelegatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Delegator represents a Delegator event raised by the Portalv3 contract.
type Portalv3Delegator struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDelegator is a free log retrieval operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterDelegator(opts *bind.FilterOpts) (*Portalv3DelegatorIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return &Portalv3DelegatorIterator{contract: _Portalv3.contract, event: "Delegator", logs: logs, sub: sub}, nil
}

// WatchDelegator is a free log subscription operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchDelegator(opts *bind.WatchOpts, sink chan<- *Portalv3Delegator) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Delegator)
				if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegator is a log parse operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseDelegator(log types.Log) (*Portalv3Delegator, error) {
	event := new(Portalv3Delegator)
	if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Portalv3 contract.
type Portalv3DepositIterator struct {
	Event *Portalv3Deposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Deposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Deposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Deposit represents a Deposit event raised by the Portalv3 contract.
type Portalv3Deposit struct {
	TokenID             common.Address
	CustodianIncAddress string
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterDeposit(opts *bind.FilterOpts) (*Portalv3DepositIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &Portalv3DepositIterator{contract: _Portalv3.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *Portalv3Deposit) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Deposit)
				if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseDeposit(log types.Log) (*Portalv3Deposit, error) {
	event := new(Portalv3Deposit)
	if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3ExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Portalv3 contract.
type Portalv3ExtendIterator struct {
	Event *Portalv3Extend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Extend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Extend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Extend represents a Extend event raised by the Portalv3 contract.
type Portalv3Extend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) FilterExtend(opts *bind.FilterOpts) (*Portalv3ExtendIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &Portalv3ExtendIterator{contract: _Portalv3.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *Portalv3Extend) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Extend)
				if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) ParseExtend(log types.Log) (*Portalv3Extend, error) {
	event := new(Portalv3Extend)
	if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3IncognitoProxyIterator is returned from FilterIncognitoProxy and is used to iterate over the raw logs and unpacked data for IncognitoProxy events raised by the Portalv3 contract.
type Portalv3IncognitoProxyIterator struct {
	Event *Portalv3IncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3IncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3IncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3IncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3IncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3IncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3IncognitoProxy represents a IncognitoProxy event raised by the Portalv3 contract.
type Portalv3IncognitoProxy struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterIncognitoProxy is a free log retrieval operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterIncognitoProxy(opts *bind.FilterOpts) (*Portalv3IncognitoProxyIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &Portalv3IncognitoProxyIterator{contract: _Portalv3.contract, event: "IncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchIncognitoProxy is a free log subscription operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchIncognitoProxy(opts *bind.WatchOpts, sink chan<- *Portalv3IncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3IncognitoProxy)
				if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncognitoProxy is a log parse operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseIncognitoProxy(log types.Log) (*Portalv3IncognitoProxy, error) {
	event := new(Portalv3IncognitoProxy)
	if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3MetaDataIterator is returned from FilterMetaData and is used to iterate over the raw logs and unpacked data for MetaData events raised by the Portalv3 contract.
type Portalv3MetaDataIterator struct {
	Event *Portalv3MetaData // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3MetaDataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3MetaData)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3MetaData)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3MetaDataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3MetaDataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3MetaData represents a MetaData event raised by the Portalv3 contract.
type Portalv3MetaData struct {
	Arg0 uint8
	Arg1 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterMetaData is a free log retrieval operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) FilterMetaData(opts *bind.FilterOpts) (*Portalv3MetaDataIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "MetaData")
	if err != nil {
		return nil, err
	}
	return &Portalv3MetaDataIterator{contract: _Portalv3.contract, event: "MetaData", logs: logs, sub: sub}, nil
}

// WatchMetaData is a free log subscription operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) WatchMetaData(opts *bind.WatchOpts, sink chan<- *Portalv3MetaData) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "MetaData")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3MetaData)
				if err := _Portalv3.contract.UnpackLog(event, "MetaData", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetaData is a log parse operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) ParseMetaData(log types.Log) (*Portalv3MetaData, error) {
	event := new(Portalv3MetaData)
	if err := _Portalv3.contract.UnpackLog(event, "MetaData", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Portalv3 contract.
type Portalv3PausedIterator struct {
	Event *Portalv3Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Paused represents a Paused event raised by the Portalv3 contract.
type Portalv3Paused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterPaused(opts *bind.FilterOpts) (*Portalv3PausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &Portalv3PausedIterator{contract: _Portalv3.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *Portalv3Paused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Paused)
				if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParsePaused(log types.Log) (*Portalv3Paused, error) {
	event := new(Portalv3Paused)
	if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Portalv3 contract.
type Portalv3UnpausedIterator struct {
	Event *Portalv3Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Unpaused represents a Unpaused event raised by the Portalv3 contract.
type Portalv3Unpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterUnpaused(opts *bind.FilterOpts) (*Portalv3UnpausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &Portalv3UnpausedIterator{contract: _Portalv3.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *Portalv3Unpaused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Unpaused)
				if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParseUnpaused(log types.Log) (*Portalv3Unpaused, error) {
	event := new(Portalv3Unpaused)
	if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3WithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Portalv3 contract.
type Portalv3WithdrawIterator struct {
	Event *Portalv3Withdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3WithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Withdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Withdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3WithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3WithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Withdraw represents a Withdraw event raised by the Portalv3 contract.
type Portalv3Withdraw struct {
	Token  []common.Address
	To     common.Address
	Amount []*big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) FilterWithdraw(opts *bind.FilterOpts) (*Portalv3WithdrawIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &Portalv3WithdrawIterator{contract: _Portalv3.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *Portalv3Withdraw) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Withdraw)
				if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) ParseWithdraw(log types.Log) (*Portalv3Withdraw, error) {
	event := new(Portalv3Withdraw)
	if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
