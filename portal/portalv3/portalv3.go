// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package portalv3

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PortalV3BurnInstData is an auto generated low-level Go binding around an user-defined struct.
type PortalV3BurnInstData struct {
	Meta    uint8
	Shard   uint8
	Tokens  []common.Address
	To      common.Address
	Amounts []*big.Int
	Itx     [32]byte
}

// Portalv3ABI is the input ABI used to generate the binding from.
const Portalv3ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Delegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structPortalV3.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// Portalv3Bin is the compiled bytecode used for deploying new contracts.
var Portalv3Bin = "0x608060405260016000806101000a81548160ff02191690831515021790555060008060016101000a81548160ff02191690831515021790555034801561004457600080fd5b506127d8806100546000396000f3fe60806040526004361061008a5760003560e01c80637e16e6e1116100595780637e16e6e1146101505780638129fc1c1461018d578063a26e1186146101a4578063cf54aaa0146101c0578063dca40d9e146101fd57610091565b806358bc8337146100965780635a67cb87146100c157806368036268146100ea57806370a082311461011357610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100ab61023a565b6040516100b89190612029565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190611507565b61023f565b005b3480156100f657600080fd5b50610111600480360381019061010c9190611606565b610580565b005b34801561011f57600080fd5b5061013a600480360381019061013591906114de565b610a26565b6040516101479190612396565b60405180910390f35b34801561015c57600080fd5b50610177600480360381019061017291906115c5565b610af5565b6040516101849190612374565b60405180910390f35b34801561019957600080fd5b506101a2610d6a565b005b6101be60048036038101906101b99190611789565b610dbb565b005b3480156101cc57600080fd5b506101e760048036038101906101e291906114de565b610ece565b6040516101f491906123b1565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f919061159c565b610f5a565b6040516102319190612144565b60405180910390f35b600081565b6000809054906101000a900460ff1661028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028490612254565b60405180910390fd5b60008060006101000a81548160ff021916908315150217905550600084905060006102b786610ece565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102f49190612044565b60206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034491906117ce565b90506000819050600087905060098460ff1611156103875760098460ff1603600a0a818161036e57fe5b04905060098460ff1603600a0a838161038357fe5b0492505b670de0b6b3a764000081111580156103a75750670de0b6b3a76400008311155b80156103cd5750670de0b6b3a76400006103ca8483610f7a90919063ffffffff16565b11155b61040c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610403906122f4565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b81526004016104499392919061205f565b600060405180830381600087803b15801561046357600080fd5b505af1158015610477573d6000803e3d6000fd5b50505050610483610fa5565b6104c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b990612354565b60405180910390fd5b876104de836104d08c610a26565b610fe390919063ffffffff16565b1461051e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051590612314565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8988888460405161055394939291906120bf565b60405180910390a1505050505060016000806101000a81548160ff02191690831515021790555050505050565b6000809054906101000a900460ff166105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c590612254565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055506105f061114c565b6105f98b610af5565b905060aa816000015160ff161480610618575060ab816000015160ff16145b8061062a575060ac816000015160ff16145b610669576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066090612234565b60405180910390fd5b600160008260a00151815260200190815260200160002060009054906101000a900460ff16156106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c5906122b4565b60405180910390fd5b60018060008360a00151815260200190815260200160002060006101000a81548160ff02191690831515021790555061070f8b8b8b8b8b8b8b8b8b8b610ffd565b60008090505b8160400151518160ff1610156109b757600073ffffffffffffffffffffffffffffffffffffffff1682604001518260ff168151811061075057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146108de57600061079883604001518360ff168151811061078b57fe5b6020026020010151610ece565b905060098160ff1611156107ec5760098160ff1603600a0a83608001518360ff16815181106107c357fe5b60200260200101510283608001518360ff16815181106107df57fe5b6020026020010181815250505b82604001518260ff16815181106107ff57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb846060015185608001518560ff168151811061083a57fe5b60200260200101516040518363ffffffff1660e01b815260040161085f929190612096565b600060405180830381600087803b15801561087957600080fd5b505af115801561088d573d6000803e3d6000fd5b50505050610899610fa5565b6108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf90612334565b60405180910390fd5b506109aa565b6000826060015173ffffffffffffffffffffffffffffffffffffffff1683608001518360ff168151811061090e57fe5b602002602001015160405161092290612014565b60006040518083038185875af1925050503d806000811461095f576040519150601f19603f3d011682016040523d82523d6000602084013e610964565b606091505b50509050806109a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099f90612334565b60405180910390fd5b505b8080600101915050610715565b507f8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b8160400151826060015183608001516040516109f7939291906120ff565b60405180910390a15060016000806101000a81548160ff02191690831515021790555050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a6457479050610af0565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a9d9190612044565b60206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906117ce565b90505b919050565b610afd61114c565b600382511015610b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3990612294565b60405180910390fd5b610b4a61114c565b82600081518110610b5757fe5b602001015160f81c60f81b60f81c816000019060ff16908160ff168152505082600181518110610b8357fe5b602001015160f81c60f81b60f81c816020019060ff16908160ff1681525050600083600281518110610bb157fe5b602001015160f81c60f81b60f81c90508060ff1660400260aa0161ffff16845114610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0890612274565b60405180910390fd5b60608160ff1667ffffffffffffffff81118015610c2d57600080fd5b50604051908082528060200260200182016040528015610c5c5781602001602082028036833780820191505090505b509050600060608360ff1667ffffffffffffffff81118015610c7d57600080fd5b50604051908082528060200260200182016040528015610cac5781602001602082028036833780820191505090505b5090506000608a88015192508460400260aa0188015190506000600190505b8560ff168160ff1611610d075760408102606a018901518160200286015260408102608a01890151816020028401528080600101915050610ccb565b5083866040018190525082866060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818660800181905250808660a0018181525050859650505050505050919050565b600060019054906101000a900460ff1615610d8457600080fd5b6001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550565b6000809054906101000a900460ff16610e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0090612254565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055506b033b2e3c9fd0803ce8000000471115610e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e69906122f4565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e6000838334604051610ea894939291906120bf565b60405180910390a160016000806101000a81548160ff0219169083151502179055505050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1a57600080fd5b505afa158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5291906117ce565b915050919050565b60016020528060005260406000206000915054906101000a900460ff1681565b6000808284019050838110158015610f925750828110155b610f9b57600080fd5b8091505092915050565b600080600090503d60008114610fc25760208114610fcb57610fd7565b60019150610fd7565b60206000803e60005191505b50600081141591505090565b600082821115610ff257600080fd5b818303905092915050565b60008a8a604051602001611012929190611fec565b60405160208183030381529060405280519060200120905061103261111b565b73ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b815260040161107f9b9a9998979695949392919061215f565b60206040518083038186803b15801561109757600080fd5b505afa1580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190611573565b61110e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611105906122d4565b60405180910390fd5b5050505050505050505050565b6000807f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd260001b9050805491505090565b6040518060c00160405280600060ff168152602001600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600080191681525090565b6000813590506111b08161272f565b92915050565b600082601f8301126111c757600080fd5b81356111da6111d5826123f9565b6123cc565b915081818352602084019350602081019050838560208402820111156111ff57600080fd5b60005b8381101561122f578161121588826113c2565b845260208401935060208301925050600181019050611202565b5050505092915050565b600082601f83011261124a57600080fd5b813561125d61125882612421565b6123cc565b9150818183526020840193506020810190508385602084028201111561128257600080fd5b60005b838110156112b2578161129888826113ec565b845260208401935060208301925050600181019050611285565b5050505092915050565b600082601f8301126112cd57600080fd5b81356112e06112db82612449565b6123cc565b9150818183526020840193506020810190508385602084028201111561130557600080fd5b60005b83811015611335578161131b888261149f565b845260208401935060208301925050600181019050611308565b5050505092915050565b600082601f83011261135057600080fd5b813561136361135e82612471565b6123cc565b9150818183526020840193506020810190508385602084028201111561138857600080fd5b60005b838110156113b8578161139e88826114c9565b84526020840193506020830192505060018101905061138b565b5050505092915050565b6000813590506113d181612746565b92915050565b6000815190506113e681612746565b92915050565b6000813590506113fb8161275d565b92915050565b600082601f83011261141257600080fd5b813561142561142082612499565b6123cc565b9150808252602083016020830185838301111561144157600080fd5b61144c8382846126d2565b50505092915050565b60008083601f84011261146757600080fd5b8235905067ffffffffffffffff81111561148057600080fd5b60208301915083600182028301111561149857600080fd5b9250929050565b6000813590506114ae81612774565b92915050565b6000815190506114c381612774565b92915050565b6000813590506114d88161278b565b92915050565b6000602082840312156114f057600080fd5b60006114fe848285016111a1565b91505092915050565b6000806000806060858703121561151d57600080fd5b600061152b878288016111a1565b945050602061153c8782880161149f565b935050604085013567ffffffffffffffff81111561155957600080fd5b61156587828801611455565b925092505092959194509250565b60006020828403121561158557600080fd5b6000611593848285016113d7565b91505092915050565b6000602082840312156115ae57600080fd5b60006115bc848285016113ec565b91505092915050565b6000602082840312156115d757600080fd5b600082013567ffffffffffffffff8111156115f157600080fd5b6115fd84828501611401565b91505092915050565b6000806000806000806000806000806101408b8d03121561162657600080fd5b60008b013567ffffffffffffffff81111561164057600080fd5b61164c8d828e01611401565b9a5050602061165d8d828e0161149f565b99505060408b013567ffffffffffffffff81111561167a57600080fd5b6116868d828e01611239565b98505060608b013567ffffffffffffffff8111156116a357600080fd5b6116af8d828e016111b6565b97505060806116c08d828e016113ec565b96505060a06116d18d828e016113ec565b95505060c08b013567ffffffffffffffff8111156116ee57600080fd5b6116fa8d828e016112bc565b94505060e08b013567ffffffffffffffff81111561171757600080fd5b6117238d828e0161133f565b9350506101008b013567ffffffffffffffff81111561174157600080fd5b61174d8d828e01611239565b9250506101208b013567ffffffffffffffff81111561176b57600080fd5b6117778d828e01611239565b9150509295989b9194979a5092959850565b6000806020838503121561179c57600080fd5b600083013567ffffffffffffffff8111156117b657600080fd5b6117c285828601611455565b92509250509250929050565b6000602082840312156117e057600080fd5b60006117ee848285016114b4565b91505092915050565b6000611803838361188d565b60208301905092915050565b600061181b8383611b3d565b60208301905092915050565b60006118338383611b5b565b60208301905092915050565b600061184b8383611f99565b60208301905092915050565b60006118638383611fce565b60208301905092915050565b6118788161269c565b82525050565b6118878161263d565b82525050565b6118968161262b565b82525050565b6118a58161262b565b82525050565b60006118b682612515565b6118c08185612598565b93506118cb836124c5565b8060005b838110156118fc5781516118e388826117f7565b97506118ee83612557565b9250506001810190506118cf565b5085935050505092915050565b600061191482612515565b61191e81856125a9565b9350611929836124c5565b8060005b8381101561195a57815161194188826117f7565b975061194c83612557565b92505060018101905061192d565b5085935050505092915050565b600061197282612520565b61197c81856125ba565b9350611987836124d5565b8060005b838110156119b857815161199f888261180f565b97506119aa83612564565b92505060018101905061198b565b5085935050505092915050565b60006119d08261252b565b6119da81856125cb565b93506119e5836124e5565b8060005b83811015611a165781516119fd8882611827565b9750611a0883612571565b9250506001810190506119e9565b5085935050505092915050565b6000611a2e82612536565b611a3881856125dc565b9350611a43836124f5565b8060005b83811015611a74578151611a5b888261183f565b9750611a668361257e565b925050600181019050611a47565b5085935050505092915050565b6000611a8c82612536565b611a9681856125ed565b9350611aa1836124f5565b8060005b83811015611ad2578151611ab9888261183f565b9750611ac48361257e565b925050600181019050611aa5565b5085935050505092915050565b6000611aea82612541565b611af481856125fe565b9350611aff83612505565b8060005b83811015611b30578151611b178882611857565b9750611b228361258b565b925050600181019050611b03565b5085935050505092915050565b611b468161264f565b82525050565b611b558161264f565b82525050565b611b648161265b565b82525050565b611b738161265b565b82525050565b6000611b848261254c565b611b8e818561260f565b9350611b9e8185602086016126e1565b80840191505092915050565b6000611bb6838561261a565b9350611bc38385846126d2565b611bcc8361271e565b840190509392505050565b6000611be460288361261a565b91507f6d657461646174612074797065206973206e6f7420616c6c6f776564206f6e2060008301527f706f7274616c76330000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611c4a601a8361261a565b91507f63616e206e6f74207265656e7472616e7420746f207661756c740000000000006000830152602082019050919050565b6000611c8a60138361261a565b91507f496e76616c696420696e737472756374696f6e000000000000000000000000006000830152602082019050919050565b6000611cca60298361261a565b91507f4c656e677468206f6620696e737472756374696f6e206d75737420677265617460008301527f6572207468616e203300000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d3060218361261a565b91507f7769746864726177207472616e73616374696f6e20616c72656164792075736560008301527f64000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d9660188361261a565b91507f696e76616c696420696e737472756374696f6e206461746100000000000000006000830152602082019050919050565b6000611dd660118361261a565b91507f6d61782076616c756520726561636865640000000000000000000000000000006000830152602082019050919050565b6000611e16602d8361261a565b91507f74686520696e70757420616d6f756e74206e6f7420657175616c20746f20616d60008301527f6f756e74207265636569766564000000000000000000000000000000000000006020830152604082019050919050565b6000611e7c601a8361261a565b91507f696e7465726e616c207472616e73616374696f6e206572726f720000000000006000830152602082019050919050565b6000611ebc60008361260f565b9150600082019050919050565b6000611ed660178361261a565b91507f7472616e736665722066726f6d20676f74206572726f720000000000000000006000830152602082019050919050565b600060c083016000830151611f216000860182611fce565b506020830151611f346020860182611fce565b5060408301518482036040860152611f4c82826118ab565b9150506060830151611f61606086018261187e565b5060808301518482036080860152611f798282611a23565b91505060a0830151611f8e60a0860182611b5b565b508091505092915050565b611fa281612685565b82525050565b611fb181612685565b82525050565b611fc8611fc382612685565b612714565b82525050565b611fd78161268f565b82525050565b611fe68161268f565b82525050565b6000611ff88285611b79565b91506120048284611fb7565b6020820191508190509392505050565b600061201f82611eaf565b9150819050919050565b600060208201905061203e600083018461189c565b92915050565b6000602082019050612059600083018461186f565b92915050565b6000606082019050612074600083018661186f565b612081602083018561186f565b61208e6040830184611fa8565b949350505050565b60006040820190506120ab600083018561186f565b6120b86020830184611fa8565b9392505050565b60006060820190506120d4600083018761189c565b81810360208301526120e7818587611baa565b90506120f66040830184611fa8565b95945050505050565b600060608201905081810360008301526121198186611909565b9050612128602083018561186f565b818103604083015261213a8184611a81565b9050949350505050565b60006020820190506121596000830184611b4c565b92915050565b600061016082019050612175600083018e611b4c565b612182602083018d611b6a565b61218f604083018c611fa8565b81810360608301526121a1818b6119c5565b905081810360808301526121b5818a611967565b90506121c460a0830189611b6a565b6121d160c0830188611b6a565b81810360e08301526121e38187611a81565b90508181036101008301526121f88186611adf565b905081810361012083015261220d81856119c5565b905081810361014083015261222281846119c5565b90509c9b505050505050505050505050565b6000602082019050818103600083015261224d81611bd7565b9050919050565b6000602082019050818103600083015261226d81611c3d565b9050919050565b6000602082019050818103600083015261228d81611c7d565b9050919050565b600060208201905081810360008301526122ad81611cbd565b9050919050565b600060208201905081810360008301526122cd81611d23565b9050919050565b600060208201905081810360008301526122ed81611d89565b9050919050565b6000602082019050818103600083015261230d81611dc9565b9050919050565b6000602082019050818103600083015261232d81611e09565b9050919050565b6000602082019050818103600083015261234d81611e6f565b9050919050565b6000602082019050818103600083015261236d81611ec9565b9050919050565b6000602082019050818103600083015261238e8184611f09565b905092915050565b60006020820190506123ab6000830184611fa8565b92915050565b60006020820190506123c66000830184611fdd565b92915050565b6000604051905081810181811067ffffffffffffffff821117156123ef57600080fd5b8060405250919050565b600067ffffffffffffffff82111561241057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561243857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561246057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561248857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156124b057600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061263682612665565b9050919050565b600061264882612665565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006126a7826126ae565b9050919050565b60006126b9826126c0565b9050919050565b60006126cb82612665565b9050919050565b82818337600083830152505050565b60005b838110156126ff5780820151818401526020810190506126e4565b8381111561270e576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b6127388161262b565b811461274357600080fd5b50565b61274f8161264f565b811461275a57600080fd5b50565b6127668161265b565b811461277157600080fd5b50565b61277d81612685565b811461278857600080fd5b50565b6127948161268f565b811461279f57600080fd5b5056fea26469706673582212209989dc1af43d8d0b32be62fc00e8984f8ea394f76d2ad3de6ec1d1b8adb3f87264736f6c63430006060033"

// DeployPortalv3 deploys a new Ethereum contract, binding an instance of Portalv3 to it.
func DeployPortalv3(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portalv3, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Portalv3Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// Portalv3 is an auto generated Go binding around an Ethereum contract.
type Portalv3 struct {
	Portalv3Caller     // Read-only binding to the contract
	Portalv3Transactor // Write-only binding to the contract
	Portalv3Filterer   // Log filterer for contract events
}

// Portalv3Caller is an auto generated read-only Go binding around an Ethereum contract.
type Portalv3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Portalv3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Portalv3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Portalv3Session struct {
	Contract     *Portalv3         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Portalv3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Portalv3CallerSession struct {
	Contract *Portalv3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Portalv3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Portalv3TransactorSession struct {
	Contract     *Portalv3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Portalv3Raw is an auto generated low-level Go binding around an Ethereum contract.
type Portalv3Raw struct {
	Contract *Portalv3 // Generic contract binding to access the raw methods on
}

// Portalv3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Portalv3CallerRaw struct {
	Contract *Portalv3Caller // Generic read-only contract binding to access the raw methods on
}

// Portalv3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Portalv3TransactorRaw struct {
	Contract *Portalv3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPortalv3 creates a new instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3(address common.Address, backend bind.ContractBackend) (*Portalv3, error) {
	contract, err := bindPortalv3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// NewPortalv3Caller creates a new read-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Caller(address common.Address, caller bind.ContractCaller) (*Portalv3Caller, error) {
	contract, err := bindPortalv3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Caller{contract: contract}, nil
}

// NewPortalv3Transactor creates a new write-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Transactor(address common.Address, transactor bind.ContractTransactor) (*Portalv3Transactor, error) {
	contract, err := bindPortalv3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Transactor{contract: contract}, nil
}

// NewPortalv3Filterer creates a new log filterer instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Filterer(address common.Address, filterer bind.ContractFilterer) (*Portalv3Filterer, error) {
	contract, err := bindPortalv3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Portalv3Filterer{contract: contract}, nil
}

// bindPortalv3 binds a generic wrapper to an already deployed contract.
func bindPortalv3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.Portalv3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Caller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Session) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3CallerSession) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Caller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Session) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Caller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Session) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3CallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Caller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (PortalV3BurnInstData, error) {
	var (
		ret0 = new(PortalV3BurnInstData)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Session) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3CallerSession) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Transactor) Deposit(opts *bind.TransactOpts, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "deposit", custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Session) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3TransactorSession) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Transactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "depositERC20", token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Session) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Portalv3 *Portalv3Transactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Portalv3 *Portalv3Session) Initialize() (*types.Transaction, error) {
	return _Portalv3.Contract.Initialize(&_Portalv3.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Portalv3 *Portalv3TransactorSession) Initialize() (*types.Transaction, error) {
	return _Portalv3.Contract.Initialize(&_Portalv3.TransactOpts)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Transactor) WithdrawLockedTokens(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "withdrawLockedTokens", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Session) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3TransactorSession) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Portalv3DelegatorIterator is returned from FilterDelegator and is used to iterate over the raw logs and unpacked data for Delegator events raised by the Portalv3 contract.
type Portalv3DelegatorIterator struct {
	Event *Portalv3Delegator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DelegatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Delegator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Delegator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DelegatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DelegatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Delegator represents a Delegator event raised by the Portalv3 contract.
type Portalv3Delegator struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDelegator is a free log retrieval operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterDelegator(opts *bind.FilterOpts) (*Portalv3DelegatorIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return &Portalv3DelegatorIterator{contract: _Portalv3.contract, event: "Delegator", logs: logs, sub: sub}, nil
}

// WatchDelegator is a free log subscription operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchDelegator(opts *bind.WatchOpts, sink chan<- *Portalv3Delegator) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Delegator)
				if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegator is a log parse operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseDelegator(log types.Log) (*Portalv3Delegator, error) {
	event := new(Portalv3Delegator)
	if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Portalv3 contract.
type Portalv3DepositIterator struct {
	Event *Portalv3Deposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Deposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Deposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Deposit represents a Deposit event raised by the Portalv3 contract.
type Portalv3Deposit struct {
	TokenID             common.Address
	CustodianIncAddress string
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterDeposit(opts *bind.FilterOpts) (*Portalv3DepositIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &Portalv3DepositIterator{contract: _Portalv3.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *Portalv3Deposit) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Deposit)
				if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseDeposit(log types.Log) (*Portalv3Deposit, error) {
	event := new(Portalv3Deposit)
	if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3IncognitoProxyIterator is returned from FilterIncognitoProxy and is used to iterate over the raw logs and unpacked data for IncognitoProxy events raised by the Portalv3 contract.
type Portalv3IncognitoProxyIterator struct {
	Event *Portalv3IncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3IncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3IncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3IncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3IncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3IncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3IncognitoProxy represents a IncognitoProxy event raised by the Portalv3 contract.
type Portalv3IncognitoProxy struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterIncognitoProxy is a free log retrieval operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterIncognitoProxy(opts *bind.FilterOpts) (*Portalv3IncognitoProxyIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &Portalv3IncognitoProxyIterator{contract: _Portalv3.contract, event: "IncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchIncognitoProxy is a free log subscription operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchIncognitoProxy(opts *bind.WatchOpts, sink chan<- *Portalv3IncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3IncognitoProxy)
				if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncognitoProxy is a log parse operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseIncognitoProxy(log types.Log) (*Portalv3IncognitoProxy, error) {
	event := new(Portalv3IncognitoProxy)
	if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3WithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Portalv3 contract.
type Portalv3WithdrawIterator struct {
	Event *Portalv3Withdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3WithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Withdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Withdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3WithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3WithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Withdraw represents a Withdraw event raised by the Portalv3 contract.
type Portalv3Withdraw struct {
	Token  []common.Address
	To     common.Address
	Amount []*big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) FilterWithdraw(opts *bind.FilterOpts) (*Portalv3WithdrawIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &Portalv3WithdrawIterator{contract: _Portalv3.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *Portalv3Withdraw) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Withdraw)
				if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) ParseWithdraw(log types.Log) (*Portalv3Withdraw, error) {
	event := new(Portalv3Withdraw)
	if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
